html,
body,
div,
span,
applet,
object,
iframe,
h1,
h2,
h3,
h4,
h5,
h6,
p,
blockquote,
pre,
a,
abbr,
acronym,
address,
big,
cite,
code,
del,
dfn,
em,
img,
ins,
kbd,
q,
s,
samp,
small,
strike,
strong,
sub,
sup,
tt,
var,
dl,
dt,
dd,
ol,
ul,
li,
fieldset,
form,
label,
legend,
table,
caption,
tbody,
tfoot,
thead,
tr,
th,
td {
  margin: 0;
  padding: 0;
  border: 0;
  outline: 0;
  font-weight: inherit;
  font-style: inherit;
  font-family: inherit;
  font-size: 100%;
  vertical-align: baseline;
}
body {
  line-height: 1;
  color: #000;
  background: #fff;
}
ol,
ul {
  list-style: none;
}
table {
  border-collapse: separate;
  border-spacing: 0;
  vertical-align: middle;
}
caption,
th,
td {
  text-align: left;
  font-weight: normal;
  vertical-align: middle;
}
a img {
  border: none;
}
article,
aside,
canvas,
details,
figcaption,
figure,
footer,
header,
hgroup,
menu,
nav,
section,
summary,
main {
  margin: 0;
  padding: 0;
  border: 0;
  outline: 0;
  display: block;
}
audio,
canvas,
video {
  display: inline-block;
  *display: inline;
  *zoom: 1;
}
audio:not([controls]),
[hidden] {
  display: none;
}
body {
  background-color: #ece2d6;
  color: #8c8389;
}
html {
  font-size: 100%;
}
@media screen and (max-width: 840px) {
  html {
    font-size: 85%;
  }
}
@media screen and (max-width: 540px) {
  html {
    font-size: 70%;
  }
}
body {
  font-family: "Ringside Regular A", "Ringside Regular B", sans-serif;
}
.page-title {
  color: #fb2768;
  font-family: "Tungsten Rounded A", "Tungsten Rounded B", sans-serif;
  font-size: 6.875rem;
  font-weight: 700;
  line-height: 6.25rem;
  margin-bottom: 1.875rem;
}
.page-header {
  margin-bottom: 1.875rem;
}
.page-header .button {
  margin-top: 2.5rem;
}
@media screen and (max-width: 540px) {
  .page-header .page-title.pull-left {
    float: none;
    text-align: center;
  }
  .page-header .button.pull-right {
    display: block;
    float: none;
    width: 100%;
    margin-top: 1.25rem;
    margin-bottom: 1.25rem;
  }
}
* {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
}
.container {
  max-width: 1300px;
  margin-left: auto;
  margin-right: auto;
  padding-left: 2.625rem;
  padding-right: 2.625rem;
}
.clearfix::after {
  content: '';
  display: table;
  clear: both;
}
.pull-left {
  float: left;
}
.pull-right {
  float: right;
}
.button {
  background-color: #fb2768;
  border: 0 none transparent;
  border-radius: 4px;
  color: #fff;
  display: inline-block;
  font-size: 1.25rem;
  line-height: 2.5rem;
  padding: 0.625rem 1.625rem;
  text-decoration: none;
  -webkit-box-shadow: 0 3px 0 #c70440;
  box-shadow: 0 3px 0 #c70440;
}
@media screen and (max-width: 540px) {
  .button {
    font-size: 1.625rem;
    line-height: 3.125rem;
    text-align: center;
  }
}
.button:hover {
  background-color: #e40449;
}
.button:active {
  opacity: 0.5;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=50)";
  filter: alpha(opacity=50);
}
.button__cancel {
  background-color: #6b3b3b;
  -webkit-box-shadow: 0 3px 0 #4b2929;
  box-shadow: 0 3px 0 #4b2929;
}
.button__cancel:hover {
  background-color: #562f2f;
}
.form {
  background-color: #fff;
  padding: 1.25rem 1.625rem;
  border-radius: 0.75rem;
}
.fields {
  width: 60%;
  float: left;
}
@media screen and (max-width: 840px) {
  .fields {
    width: 100%;
    float: none;
  }
}
.actions {
  width: 35%;
  float: right;
}
@media screen and (max-width: 840px) {
  .actions {
    margin-top: 3.125rem;
    width: 100%;
    float: none;
  }
  .actions .button {
    display: block;
    margin-bottom: 1.25rem;
    width: 100%;
    text-align: center;
  }
}
.label {
  color: #6b3b3b;
  display: block;
  font-family: "Tungsten Rounded A", "Tungsten Rounded B", sans-serif;
  font-size: 2.25rem;
  line-height: 2.5rem;
  margin-bottom: 0.625rem;
}
.field {
  margin-bottom: 1.875rem;
}
.input {
  font-family: "Ringside Regular A", "Ringside Regular B", sans-serif;
  font-size: 1.25rem;
  line-height: 1.875rem;
  padding: 0.625rem 1rem;
  border-radius: 0.375rem;
  -webkit-box-shadow: inset 0 3px 12px rgba(0,0,0,0.15);
  box-shadow: inset 0 3px 12px rgba(0,0,0,0.15);
  border: 0 none transparent;
  width: 100%;
}
textarea.input {
  resize: vertical;
}
.cakes--list::after {
  content: '';
  display: table;
  clear: both;
}
.cakes--item {
  float: left;
  margin-bottom: 3.125rem;
  margin-right: 3%;
  position: relative;
  width: 31.333333333333336%;
  -webkit-transition: -webkit-transform 0.25s ease-in;
  -moz-transition: -moz-transform 0.25s ease-in;
  -o-transition: -o-transform 0.25s ease-in;
  -ms-transition: -ms-transform 0.25s ease-in;
  transition: transform 0.25s ease-in;
  -webkit-box-shadow: 0 1px 2px rgba(0,0,0,0.15), box-shadow 0.25s ease-in;
  box-shadow: 0 1px 2px rgba(0,0,0,0.15), box-shadow 0.25s ease-in;
  overflow: hidden;
  border-radius: 0.75rem;
  height: 31.25rem;
}
.cakes--item:nth-child(3n) {
  margin-right: 0;
}
.cakes--item:hover {
  -webkit-transform: translateY(-0.3125rem);
  -moz-transform: translateY(-0.3125rem);
  -o-transform: translateY(-0.3125rem);
  -ms-transform: translateY(-0.3125rem);
  transform: translateY(-0.3125rem);
  -webkit-box-shadow: 0 3px 20px rgba(0,0,0,0.15);
  box-shadow: 0 3px 20px rgba(0,0,0,0.15);
}
@media screen and (max-width: 840px) {
  .cakes--item {
    width: 47.5%;
    margin-right: 5%;
  }
  .cakes--item:nth-child(3n) {
    margin-right: 5%;
  }
  .cakes--item:nth-child(2n) {
    margin-right: 0;
  }
}
@media screen and (max-width: 540px) {
  .cakes--item {
    width: 100%;
    margin-right: 0;
  }
}
.cakes--item-link {
  background-color: #fff;
  color: inherit;
  display: block;
  text-decoration: none;
  height: 31.25rem;
}
.cakes--item-poster {
  display: block;
  margin-bottom: 1.25rem;
  width: 100%;
}
.cakes--item-name {
  color: #fb2768;
  font-size: 2.625rem;
  font-weight: 700;
  margin-bottom: 0.625rem;
  padding-left: 1.625rem;
  padding-right: 1.625rem;
}
.cakes--item-comment {
  font-size: 1rem;
  line-height: 1.25rem;
}
.cakes--item-remove {
  background-color: #e6e6e6;
  border-radius: 1.875rem;
  bottom: 1.25rem;
  display: -webkit-box;
  display: -moz-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: box;
  display: flex;
  height: 2.5rem;
  position: absolute;
  right: 1.25rem;
  width: 2.5rem;
  -webkit-box-align: center;
  -moz-box-align: center;
  -o-box-align: center;
  -ms-flex-align: center;
  -webkit-align-items: center;
  align-items: center;
  -webkit-box-pack: center;
  -moz-box-pack: center;
  -o-box-pack: center;
  -ms-flex-pack: center;
  -webkit-justify-content: center;
  justify-content: center;
}
.cakes--item-remove svg {
  width: 1.25rem;
  height: 1.25rem;
  fill: #b3b3b3;
}
.cakes--item-remove:hover {
  background-color: #fb2768;
}
.cakes--item-remove:hover svg {
  fill: #fff;
}
.cake-details {
  background-color: #fff;
  border-radius: 0.75rem;
  padding: 2.5rem 2.625rem;
}
.cake-details--poster {
  display: block;
  margin-bottom: 1.875rem;
  width: 100%;
}
.cake-details--comment {
  font-size: 1.25rem;
  line-height: 1.5625rem;
}
.cake-details--comment em {
  font-style: italic;
}
.cake-details--comment strong {
  font-weight: bold;
}
.header {
  background-color: #6b3b3b;
  display: block;
  margin-bottom: 1.875rem;
  padding: 1.25rem 0;
}
.header .logo a {
  color: #ece2d6;
  font-family: "Tungsten Rounded A", "Tungsten Rounded B", sans-serif;
  font-size: 2.625rem;
  font-weight: 700;
  letter-spacing: 1px;
  line-height: 3.125rem;
  text-decoration: none;
}
.icon {
  display: inline-block;
  width: 1.875rem;
  height: 1.875rem;
  background-color: #fff;
  border-radius: 1.875rem;
  margin-right: 0.3125rem;
}
.icon svg {
  width: 100%;
  height: 100%;
  fill: #fb2768;
}
.button .icon {
  position: relative;
  top: 0.375rem;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
