html,
body,
div,
span,
applet,
object,
iframe,
h1,
h2,
h3,
h4,
h5,
h6,
p,
blockquote,
pre,
a,
abbr,
acronym,
address,
big,
cite,
code,
del,
dfn,
em,
img,
ins,
kbd,
q,
s,
samp,
small,
strike,
strong,
sub,
sup,
tt,
var,
dl,
dt,
dd,
ol,
ul,
li,
fieldset,
form,
label,
legend,
table,
caption,
tbody,
tfoot,
thead,
tr,
th,
td {
  margin: 0;
  padding: 0;
  border: 0;
  outline: 0;
  font-weight: inherit;
  font-style: inherit;
  font-family: inherit;
  font-size: 100%;
  vertical-align: baseline;
}
body {
  line-height: 1;
  color: #000;
  background: #fff;
}
ol,
ul {
  list-style: none;
}
table {
  border-collapse: separate;
  border-spacing: 0;
  vertical-align: middle;
}
caption,
th,
td {
  text-align: left;
  font-weight: normal;
  vertical-align: middle;
}
a img {
  border: none;
}
article,
aside,
canvas,
details,
figcaption,
figure,
footer,
header,
hgroup,
menu,
nav,
section,
summary,
main {
  margin: 0;
  padding: 0;
  border: 0;
  outline: 0;
  display: block;
}
audio,
canvas,
video {
  display: inline-block;
  *display: inline;
  *zoom: 1;
}
audio:not([controls]),
[hidden] {
  display: none;
}
body {
  background-color: #ece2d6;
  color: #8c8389;
}
html {
  font-size: 100%;
}
@media screen and (max-width: 840px) {
  html {
    font-size: 85%;
  }
}
@media screen and (max-width: 540px) {
  html {
    font-size: 70%;
  }
}
body {
  font-family: "Ringside Regular A", "Ringside Regular B", sans-serif;
}
.page-title {
  color: #fb2768;
  font-family: "Tungsten Rounded A", "Tungsten Rounded B", sans-serif;
  font-size: 6.875rem;
  font-weight: 700;
  line-height: 6.25rem;
  margin-bottom: 1.875rem;
}
.page-header {
  margin-bottom: 1.875rem;
}
.page-header .button {
  margin-top: 2.5rem;
}
@media screen and (max-width: 540px) {
  .page-header .page-title.pull-left {
    float: none;
    text-align: center;
  }
  .page-header .button.pull-right {
    display: block;
    float: none;
    width: 100%;
    margin-top: 1.25rem;
    margin-bottom: 1.25rem;
  }
}
* {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
}
.container {
  max-width: 1300px;
  margin-left: auto;
  margin-right: auto;
  padding-left: 2.625rem;
  padding-right: 2.625rem;
}
.clearfix::after {
  content: '';
  display: table;
  clear: both;
}
.pull-left {
  float: left;
}
.pull-right {
  float: right;
}
.button {
  background-color: #fb2768;
  border: 0 none transparent;
  border-radius: 4px;
  color: #fff;
  display: inline-block;
  font-size: 1.25rem;
  line-height: 2.5rem;
  padding: 0.625rem 1.625rem;
  text-decoration: none;
  -webkit-box-shadow: 0 3px 0 #c70440;
  box-shadow: 0 3px 0 #c70440;
}
@media screen and (max-width: 540px) {
  .button {
    font-size: 1.625rem;
    line-height: 3.125rem;
    text-align: center;
  }
}
.button:hover {
  background-color: #e40449;
}
.button:active {
  opacity: 0.5;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=50)";
  filter: alpha(opacity=50);
}
.button__cancel {
  background-color: #6b3b3b;
  -webkit-box-shadow: 0 3px 0 #4b2929;
  box-shadow: 0 3px 0 #4b2929;
}
.button__cancel:hover {
  background-color: #562f2f;
}
.form {
  background-color: #fff;
  padding: 1.25rem 1.625rem;
  border-radius: 0.75rem;
}
.fields {
  width: 60%;
  float: left;
}
.actions {
  width: 35%;
  float: right;
}
.label {
  color: #6b3b3b;
  display: block;
  font-family: "Tungsten Rounded A", "Tungsten Rounded B", sans-serif;
  font-size: 2.25rem;
  line-height: 2.5rem;
  margin-bottom: 0.625rem;
}
.field {
  margin-bottom: 1.875rem;
}
.input {
  font-family: "Ringside Regular A", "Ringside Regular B", sans-serif;
  font-size: 1.25rem;
  line-height: 1.875rem;
  padding: 0.625rem 1rem;
  border-radius: 0.375rem;
  -webkit-box-shadow: inset 0 3px 12px rgba(0,0,0,0.15);
  box-shadow: inset 0 3px 12px rgba(0,0,0,0.15);
  border: 0 none transparent;
  width: 100%;
}
textarea.input {
  resize: vertical;
}
.cakes--list::after {
  content: '';
  display: table;
  clear: both;
}
.cakes--item {
  float: left;
  margin-bottom: 3.125rem;
  margin-right: 3%;
  position: relative;
  width: 31.333333333333336%;
  -webkit-transition: -webkit-transform 0.25s ease-in;
  -moz-transition: -moz-transform 0.25s ease-in;
  -o-transition: -o-transform 0.25s ease-in;
  -ms-transition: -ms-transform 0.25s ease-in;
  transition: transform 0.25s ease-in;
  -webkit-box-shadow: 0 1px 2px rgba(0,0,0,0.15), box-shadow 0.25s ease-in;
  box-shadow: 0 1px 2px rgba(0,0,0,0.15), box-shadow 0.25s ease-in;
  overflow: hidden;
  border-radius: 0.75rem;
  height: 31.25rem;
}
.cakes--item:nth-child(3n) {
  margin-right: 0;
}
.cakes--item:hover {
  -webkit-transform: translateY(-0.3125rem);
  -moz-transform: translateY(-0.3125rem);
  -o-transform: translateY(-0.3125rem);
  -ms-transform: translateY(-0.3125rem);
  transform: translateY(-0.3125rem);
  -webkit-box-shadow: 0 3px 20px rgba(0,0,0,0.15);
  box-shadow: 0 3px 20px rgba(0,0,0,0.15);
}
@media screen and (max-width: 840px) {
  .cakes--item {
    width: 47.5%;
    margin-right: 5%;
  }
  .cakes--item:nth-child(3n) {
    margin-right: 5%;
  }
  .cakes--item:nth-child(2n) {
    margin-right: 0;
  }
}
@media screen and (max-width: 540px) {
  .cakes--item {
    width: 100%;
    margin-right: 0;
  }
}
.cakes--item-link {
  background-color: #fff;
  color: inherit;
  display: block;
  text-decoration: none;
  height: 31.25rem;
}
.cakes--item-poster {
  display: block;
  margin-bottom: 1.25rem;
  width: 100%;
}
.cakes--item-name {
  color: #fb2768;
  font-size: 2.625rem;
  font-weight: 700;
  margin-bottom: 0.625rem;
  padding-left: 1.625rem;
  padding-right: 1.625rem;
}
.cakes--item-comment {
  font-size: 1rem;
  line-height: 1.25rem;
}
.cakes--item-remove {
  background-color: #e6e6e6;
  border-radius: 1.875rem;
  bottom: 1.25rem;
  display: -webkit-box;
  display: -moz-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: box;
  display: flex;
  height: 2.5rem;
  position: absolute;
  right: 1.25rem;
  width: 2.5rem;
  -webkit-box-align: center;
  -moz-box-align: center;
  -o-box-align: center;
  -ms-flex-align: center;
  -webkit-align-items: center;
  align-items: center;
  -webkit-box-pack: center;
  -moz-box-pack: center;
  -o-box-pack: center;
  -ms-flex-pack: center;
  -webkit-justify-content: center;
  justify-content: center;
}
.cakes--item-remove svg {
  width: 1.25rem;
  height: 1.25rem;
  fill: #b3b3b3;
}
.cakes--item-remove:hover {
  background-color: #fb2768;
}
.cakes--item-remove:hover svg {
  fill: #fff;
}
.cake-details {
  background-color: #fff;
  border-radius: 0.75rem;
  padding: 2.5rem 2.625rem;
}
.cake-details--poster {
  display: block;
  margin-bottom: 1.875rem;
}
.cake-details--comment {
  font-size: 1.25rem;
  line-height: 1.5625rem;
}
.header {
  background-color: #6b3b3b;
  display: block;
  margin-bottom: 1.875rem;
  padding: 1.25rem 0;
}
.header .logo a {
  color: #ece2d6;
  font-family: "Tungsten Rounded A", "Tungsten Rounded B", sans-serif;
  font-size: 2.625rem;
  font-weight: 700;
  letter-spacing: 1px;
  line-height: 3.125rem;
  text-decoration: none;
}
.icon {
  display: inline-block;
  width: 1.875rem;
  height: 1.875rem;
  background-color: #fff;
  border-radius: 1.875rem;
  margin-right: 0.3125rem;
}
.icon svg {
  width: 100%;
  height: 100%;
  fill: #fb2768;
}
.button .icon {
  position: relative;
  top: 0.375rem;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL25vZGVfbW9kdWxlcy9uaWIvbGliL25pYi9yZXNldC5zdHlsIiwiLi4vLi4vbm9kZV9tb2R1bGVzL25pYi9saWIvbmliL2JvcmRlci5zdHlsIiwiLi4vLi4vbm9kZV9tb2R1bGVzL25pYi9saWIvbmliL3ZlbmRvci5zdHlsIiwiLi4vLi4vbm9kZV9tb2R1bGVzL25pYi9saWIvbmliL2ZsZXguc3R5bCIsImdsb2JhbHMvY29sb3JzLnN0eWwiLCJnbG9iYWxzL3R5cG9ncmFwaHkuc3R5bCIsImdsb2JhbHMvbGF5b3V0LnN0eWwiLCIuLi8uLi9ub2RlX21vZHVsZXMvamVldC9zdHlsL19ncmlkLnN0eWwiLCJnbG9iYWxzL2J1dHRvbnMuc3R5bCIsIi4uLy4uL25vZGVfbW9kdWxlcy9uaWIvbGliL25pYi9ib3JkZXItcmFkaXVzLnN0eWwiLCJnbG9iYWxzL2Zvcm1zLnN0eWwiLCJibG9ja3MvY2FrZXMuc3R5bCIsIi4uLy4uL25vZGVfbW9kdWxlcy9uaWIvbGliL25pYi9vdmVyZmxvdy5zdHlsIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWx1cy9saWIvZnVuY3Rpb25zL2luZGV4LnN0eWwiLCJibG9ja3MvaGVhZGVyLnN0eWwiLCJibG9ja3MvaWNvbi5zdHlsIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdFO0FBQU07QUFBTTtBQUFLO0FBQU07QUFBUTtBQUFRO0FBQU87QUFDSztBQUFJO0FBQUk7QUFBSTtBQUFJO0FBQUk7QUFBRztBQUFZO0FBQUk7QUFDSTtBQUFNO0FBQVM7QUFBUztBQUFLO0FBQU07QUFBSztBQUNNO0FBQUs7QUFBSTtBQUFLO0FBQUs7QUFBSztBQUFHO0FBQUc7QUFBSztBQUNRO0FBQVE7QUFBUTtBQUFLO0FBQUs7QUFBSTtBQUFJO0FBQ0s7QUFBSTtBQUFJO0FBQUk7QUFBSTtBQUFHO0FBQ1c7QUFBTTtBQUFPO0FBQU87QUFDUTtBQUFTO0FBQU87QUFBTztBQUFPO0FBQUk7QUFBSTtFQTZCOVQsUUFBUSxFQUFSO0VBQ0Es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VDtFUXNGQSxlQUF3QixTQUF4Qjs7QUFHRjtFQUNFLFdBQW9CLFFBQXBCO0VBQ0EsYUFBc0IsVUFBdEI7O0FHakhKO0VBQ0Usa0JBQWtCLFFBQWxCO0VYcUJFLFNBQVMsTUFBVDtFV25CRixlQUF3QixTQUF4QjtFQUNBLFNBQWtCLFVBQWxCOztBQUdFO0VBQ0UsT0FBTyxRQUFQO0VBQ0EsYUFBYSx1REFBYjtFQUNBLFdBQW9CLFNBQXBCO0VBQ0EsYUFBYSxJQUFiO0VBQ0EsZ0JBQWdCLElBQWhCO0VBQ0EsYUFBc0IsU0FBdEI7RUFDQSxpQkFBaUIsS0FBakI7O0FDZE47RVpzQkksU0FBUyxhQUFUO0VZcEJGLE9BQWdCLFNBQWhCO0VBQ0EsUUFBaUIsU0FBakI7RUFDQSxrQkFBa0IsS0FBbEI7RU5nREEsZUFBYyxTQUFkO0VNOUNBLGNBQXNCLFVBQXRCOztBQUVBO0VBQ0UsT0FBTyxLQUFQO0VBQ0EsUUFBUSxLQUFSO0VBQ0EsTUFBTSxRQUFOOztBQUdGO0VBQ0UsVUFBVSxTQUFWO0VBQ0EsS0FBYSxTQUFiIiwiZmlsZSI6InN0eWxlcy5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBCYXNlZCBvbiBbRXJpYyBNZXllcidzIHJlc2V0XShodHRwOi8vbWV5ZXJ3ZWIuY29tL2VyaWMvdGhvdWdodHMvMjAwNy8wNS8wMS9yZXNldC1yZWxvYWRlZC8pXG5cbmdsb2JhbC1yZXNldCgpXG4gIGh0bWwsIGJvZHksIGRpdiwgc3BhbiwgYXBwbGV0LCBvYmplY3QsIGlmcmFtZSxcbiAgaDEsIGgyLCBoMywgaDQsIGg1LCBoNiwgcCwgYmxvY2txdW90ZSwgcHJlLFxuICBhLCBhYmJyLCBhY3JvbnltLCBhZGRyZXNzLCBiaWcsIGNpdGUsIGNvZGUsXG4gIGRlbCwgZGZuLCBlbSwgaW1nLCBpbnMsIGtiZCwgcSwgcywgc2FtcCxcbiAgc21hbGwsIHN0cmlrZSwgc3Ryb25nLCBzdWIsIHN1cCwgdHQsIHZhcixcbiAgZGwsIGR0LCBkZCwgb2wsIHVsLCBsaSxcbiAgZmllbGRzZXQsIGZvcm0sIGxhYmVsLCBsZWdlbmQsXG4gIHRhYmxlLCBjYXB0aW9uLCB0Ym9keSwgdGZvb3QsIHRoZWFkLCB0ciwgdGgsIHRkXG4gICAgcmVzZXQtYm94LW1vZGVsKClcbiAgICByZXNldC1mb250KClcbiAgYm9keVxuICAgIHJlc2V0LWJvZHkoKVxuICBvbCwgdWxcbiAgICBsaXN0LXN0eWxlOiBub25lXG4gIHRhYmxlXG4gICAgcmVzZXQtdGFibGUoKVxuICBjYXB0aW9uLCB0aCwgdGRcbiAgICByZXNldC10YWJsZS1jZWxsKClcbiAgYSBpbWdcbiAgICBib3JkZXI6IG5vbmVcblxubmVzdGVkLXJlc2V0KClcbiAgZGl2LCBzcGFuLCBvYmplY3QsIGlmcmFtZSwgaDEsIGgyLCBoMywgaDQsIGg1LCBoNiwgcCxcbiAgcHJlLCBhLCBhYmJyLCBhY3JvbnltLCBhZGRyZXNzLCBjb2RlLCBkZWwsIGRmbiwgZW0sIGltZyxcbiAgZGwsIGR0LCBkZCwgb2wsIHVsLCBsaSwgZmllbGRzZXQsIGZvcm0sIGxhYmVsLFxuICBsZWdlbmQsIGNhcHRpb24sIHRib2R5LCB0Zm9vdCwgdGhlYWQsIHRyXG4gICAgcmVzZXQtYm94LW1vZGVsKClcbiAgICByZXNldC1mb250KClcbiAgdGFibGVcbiAgICByZXNldC10YWJsZSgpXG4gIGNhcHRpb24sIHRoLCB0ZFxuICAgIHJlc2V0LXRhYmxlLWNlbGwoKVxuICBhIGltZ1xuICAgIGJvcmRlcjogbm9uZVxuXG5yZXNldC1ib3gtbW9kZWwoKVxuICBtYXJnaW46IDBcbiAgcGFkZGluZzogMFxuICBib3JkZXI6IDBcbiAgb3V0bGluZTogMFxuXG5yZXNldC1mb250KClcbiAgZm9udC13ZWlnaHQ6IGluaGVyaXRcbiAgZm9udC1zdHlsZTogaW5oZXJpdFxuICBmb250LWZhbWlseTogaW5oZXJpdFxuICBmb250LXNpemU6IDEwMCVcbiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lXG5cbnJlc2V0LWJvZHkoKVxuICBsaW5lLWhlaWdodDogMVxuICBjb2xvcjogYmxhY2tcbiAgYmFja2dyb3VuZDogd2hpdGVcblxucmVzZXQtdGFibGUoKVxuICBib3JkZXItY29sbGFwc2U6IHNlcGFyYXRlXG4gIGJvcmRlci1zcGFjaW5nOiAwXG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGVcblxucmVzZXQtdGFibGUtY2VsbCgpXG4gIHRleHQtYWxpZ246IGxlZnRcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbFxuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlXG5cbnJlc2V0LWh0bWw1KClcbiAgYXJ0aWNsZSwgYXNpZGUsIGNhbnZhcywgZGV0YWlscywgZmlnY2FwdGlvbixcbiAgZmlndXJlLCBmb290ZXIsIGhlYWRlciwgaGdyb3VwLCBtZW51LCBuYXYsXG4gIHNlY3Rpb24sIHN1bW1hcnksIG1haW5cbiAgICByZXNldC1ib3gtbW9kZWwoKVxuICAgIGRpc3BsYXk6IGJsb2NrXG4gIGF1ZGlvLCBjYW52YXMsIHZpZGVvXG4gICAgZGlzcGxheSBpbmxpbmUtYmxvY2tcbiAgICAqZGlzcGxheSBpbmxpbmVcbiAgICAqem9vbSAxXG4gIGF1ZGlvOm5vdChbY29udHJvbHNdKSxbaGlkZGVuXVxuICAgIGRpc3BsYXkgbm9uZVxuIiwiLypcbiAqIGJvcmRlcjogPGNvbG9yPlxuICogYm9yZGVyOiAuLi5cbiAqL1xuXG5ib3JkZXIoY29sb3IsIGFyZ3MuLi4pXG4gIGlmIGNvbG9yIGlzIGEgJ2NvbG9yJ1xuICAgIGJvcmRlcjogMXB4IHNvbGlkIGNvbG9yIGFyZ3NcbiAgZWxzZVxuICAgIGJvcmRlcjogYXJndW1lbnRzXG4iLCJ1c2UoJy4uL25vZGVzL3ZlbmRvci1oZWxwZXJzLmpzJylcbkBpbXBvcnQgJ2NvbmZpZydcblxuLypcbiAqIEFsaWFzIFwibm93cmFwXCIgYXMgXCJuby13cmFwXCIuXG4gKi9cblxubm8td3JhcCA9IHVucXVvdGUoJ25vd3JhcCcpXG5cbi8qXG4gKiBIZWxwZXIgdG8gZmluZCBvdXQgaWYgYSBnaXZlbiB2YWx1ZSBpcyBhIHdpZHRoXG4gKi9cblxuaXMtd2lkdGgodmFsKVxuICBpZiBhdXRvID09IHZhbFxuICAgIHJldHVybiB0cnVlXG4gIGVsc2UgaWYgdmFsICYmICd1bml0JyA9PSB0eXBlKHZhbClcbiAgICAvLyBTdHlsdXMgZG9lcyBub3Qgc2hvcnQgY2lyY3VpdCBzbyB3ZSBuZWVkIHRvIHBlcmZvcm0gdGhpcyBhcyBhIGRpc3RpbmN0XG4gICAgLy8gb3BlcmF0aW9uIHRvIHByZXZlbnQgZXJyb3JzXG4gICAgcmV0dXJuICcnICE9IHVuaXQodmFsKVxuICByZXR1cm4gZmFsc2VcblxuLypcbiAqIFZlbmRvciBzdXBwb3J0IGZvciB0aGUgZ2l2ZW4gcHJvcCAvIGFyZ3VtZW50cywgb3B0aW9uYWxseSBzcGVjaWZ5aW5nIHRoZVxuICogb25seSBwcmVmaXhlcyB0byB1dGlsaXplLCBvciB0aG9zZSB3aGljaCBzaG91bGQgYmUgaWdub3JlZC5cbiAqL1xuXG52ZW5kb3IocHJvcCwgYXJncywgb25seSA9IG51bGwsIGlnbm9yZSA9IG51bGwsIHZlbmRvci1wcm9wZXJ0eSA9IHRydWUpXG4gIG5lZWRfbm9ybWFsaXplID0gIXZlbmRvci1wcm9wZXJ0eSBvciBwcm9wIGluICgndHJhbnNpdGlvbicgJ3RyYW5zaXRpb24tcHJvcGVydHknICdib3JkZXItaW1hZ2UnICdib3JkZXItaW1hZ2Utc2xpY2UnKVxuICBmb3IgcHJlZml4IGluIHZlbmRvci1wcmVmaXhlc1xuICAgIHVubGVzcyAob25seSBhbmQgIShwcmVmaXggaW4gb25seSkpIG9yIChpZ25vcmUgYW5kIHByZWZpeCBpbiBpZ25vcmUpXG4gICAgICBpZiBvZmZpY2lhbCA9PSBwcmVmaXhcbiAgICAgICAgaWYgbmVlZF9ub3JtYWxpemVcbiAgICAgICAgICB7cHJvcH06IG5vcm1hbGl6ZShwcm9wLCgnJXMnICUgYXJncykpXG4gICAgICAgIGVsc2VcbiAgICAgICAgICB7cHJvcH06IGFyZ3NcbiAgICAgIGVsc2VcbiAgICAgICAgbmV3cHJvcCA9IHByb3BcbiAgICAgICAgbmV3cHJvcCA9ICctJyArIHByZWZpeCArICctJyArIHByb3AgaWYgdmVuZG9yLXByb3BlcnR5XG5cbiAgICAgICAgaWYgbmVlZF9ub3JtYWxpemVcbiAgICAgICAgICB7bmV3cHJvcH06IG5vcm1hbGl6ZShwcm9wLCgnJXMnICUgYXJncykscHJlZml4KVxuICAgICAgICBlbHNlXG4gICAgICAgICAge25ld3Byb3B9OiBhcmdzXG4vKlxuICogVmVuZG9yaXplIHRoZSBnaXZlbiB2YWx1ZS5cbiAqL1xuXG52ZW5kb3ItdmFsdWUoYXJnLCBvbmx5ID0gbnVsbCwgaWdub3JlID0gbnVsbClcbiAgcHJvcCA9IGN1cnJlbnQtcHJvcGVydHlbMF1cbiAgZm9yIHByZWZpeCBpbiB2ZW5kb3ItcHJlZml4ZXNcbiAgICB1bmxlc3MgKG9ubHkgYW5kICEocHJlZml4IGluIG9ubHkpKSBvciAoaWdub3JlIGFuZCBwcmVmaXggaW4gaWdub3JlKSBvciBvZmZpY2lhbCA9PSBwcmVmaXhcbiAgICAgIGFkZC1wcm9wZXJ0eShwcm9wLCAnLSVzLSVzJyAlIChwcmVmaXggYXJnKSlcbiAgYXJnXG5cbi8qXG4gKiBWZW5kb3IgXCJib3gtc2hhZG93XCIgc3VwcG9ydC5cbiAqL1xuXG5ib3gtc2hhZG93KClcbiAgdmVuZG9yKCdib3gtc2hhZG93JywgYXJndW1lbnRzLCBvbmx5OiB3ZWJraXQgb2ZmaWNpYWwpXG5cbi8qXG4gKiBWZW5kb3IgXCJ1c2VyLXNlbGVjdFwiIHN1cHBvcnQuXG4gKi9cblxudXNlci1zZWxlY3QoKVxuICB2ZW5kb3IoJ3VzZXItc2VsZWN0JywgYXJndW1lbnRzLCBvbmx5OiB3ZWJraXQgbW96IG1zIG9mZmljaWFsKVxuXG4vKlxuICogVmVuZG9yIFwiY29sdW1uLWNvdW50XCIgc3VwcG9ydC5cbiAqL1xuXG5jb2x1bW4tY291bnQoKVxuICB2ZW5kb3IoJ2NvbHVtbi1jb3VudCcsIGFyZ3VtZW50cywgb25seTogd2Via2l0IG1veiBvZmZpY2lhbClcblxuLypcbiAqIFZlbmRvciBcImNvbHVtbi1nYXBcIiBzdXBwb3J0LlxuICovXG5cbmNvbHVtbi1nYXAoKVxuICB2ZW5kb3IoJ2NvbHVtbi1nYXAnLCBhcmd1bWVudHMsIG9ubHk6IHdlYmtpdCBtb3ogb2ZmaWNpYWwpXG5cbi8qXG4gKiBWZW5kb3IgXCJjb2x1bW4tcnVsZVwiIHN1cHBvcnQuXG4gKi9cblxuY29sdW1uLXJ1bGUoKVxuICB2ZW5kb3IoJ2NvbHVtbi1ydWxlJywgYXJndW1lbnRzLCBvbmx5OiB3ZWJraXQgbW96IG9mZmljaWFsKVxuXG4vKlxuICogVmVuZG9yIFwiY29sdW1uLXJ1bGUtY29sb3JcIiBzdXBwb3J0LlxuICovXG5cbmNvbHVtbi1ydWxlLWNvbG9yKClcbiAgdmVuZG9yKCdjb2x1bW4tcnVsZS1jb2xvcicsIGFyZ3VtZW50cywgb25seTogd2Via2l0IG1veiBvZmZpY2lhbClcblxuLypcbiAqIFZlbmRvciBcImNvbHVtbi1ydWxlLXdpZHRoXCIgc3VwcG9ydC5cbiAqL1xuXG5jb2x1bW4tcnVsZS13aWR0aCgpXG4gIHZlbmRvcignY29sdW1uLXJ1bGUtd2lkdGgnLCBhcmd1bWVudHMsIG9ubHk6IHdlYmtpdCBtb3ogb2ZmaWNpYWwpXG5cbi8qXG4gKiBWZW5kb3IgXCJjb2x1bW4tcnVsZS1zdHlsZVwiIHN1cHBvcnQuXG4gKi9cblxuY29sdW1uLXJ1bGUtc3R5bGUoKVxuICB2ZW5kb3IoJ2NvbHVtbi1ydWxlLXN0eWxlJywgYXJndW1lbnRzLCBvbmx5OiB3ZWJraXQgbW96IG9mZmljaWFsKVxuXG4vKlxuICogVmVuZG9yIFwiY29sdW1uLXdpZHRoXCIgc3VwcG9ydC5cbiAqL1xuXG5jb2x1bW4td2lkdGgoKVxuICB2ZW5kb3IoJ2NvbHVtbi13aWR0aCcsIGFyZ3VtZW50cywgb25seTogd2Via2l0IG1veiBvZmZpY2lhbClcblxuLypcbiAqIFZlbmRvciBcImNvbHVtbi1zcGFuXCIgc3VwcG9ydC5cbiAqL1xuXG5jb2x1bW4tc3BhbigpXG4gIHZlbmRvcignY29sdW1uLXNwYW4nLCBhcmd1bWVudHMsIG9ubHk6IHdlYmtpdCBvZmZpY2lhbClcblxuLypcbiAqIFZlbmRvciBcImNvbHVtbi1maWxsXCIgc3VwcG9ydC5cbiAqL1xuXG5jb2x1bW4tZmlsbCgpXG4gIHZlbmRvcignY29sdW1uLWZpbGwnLCBhcmd1bWVudHMsIG9ubHk6IG1veilcblxuLypcbiAqIExlZ2FjeSBzeW50YXggc3VwcG9ydCBmb3IgYmFja2dyb3VuZC1jbGlwIGFuZCBiYWNrZ3JvdW5kLW9yaWdpblxuICovXG5cbmxlZ2FjeS1iZy12YWx1ZXMocHJvcGVydHksIGFyZ3MpXG4gIGxlZ2FjeV9hcmdzID0gKClcbiAgaW1wb3J0YW5jZSA9IHVucXVvdGUoJycpXG4gIGZvciBzdWJhcmdzIGluIGFyZ3NcbiAgICBmb3IgYXJnIGluIHN1YmFyZ3NcbiAgICAgIGlmIGFyZyBpbiAoYm9yZGVyLWJveCBwYWRkaW5nLWJveCBjb250ZW50LWJveClcbiAgICAgICAgYXJnID0gdW5xdW90ZSgnYm9yZGVyJykgIGlmIGFyZyA9PSBib3JkZXItYm94XG4gICAgICAgIGFyZyA9IHVucXVvdGUoJ3BhZGRpbmcnKSBpZiBhcmcgPT0gcGFkZGluZy1ib3hcbiAgICAgICAgYXJnID0gdW5xdW90ZSgnY29udGVudCcpIGlmIGFyZyA9PSBjb250ZW50LWJveFxuICAgICAgaWYgYXJnICE9ICchaW1wb3J0YW50J1xuICAgICAgICBwdXNoKGxlZ2FjeV9hcmdzLGFyZylcbiAgICAgIGVsc2VcbiAgICAgICAgaW1wb3J0YW5jZSA9ICFpbXBvcnRhbnRcbiAgdmVuZG9yKHByb3BlcnR5LCB1bnF1b3RlKGpvaW4oJywgJyxsZWdhY3lfYXJncykpIGltcG9ydGFuY2UsIG9ubHk6IG1veiB3ZWJraXQpXG5cbi8qXG4gKiBWZW5kb3IgXCJiYWNrZ3JvdW5kLWNsaXBcIiBzdXBwb3J0LlxuICovXG5cbmJhY2tncm91bmQtY2xpcCgpXG4gIGlmIGFyZ3VtZW50c1swXSA9PSB0ZXh0XG4gICAgdmVuZG9yKCdiYWNrZ3JvdW5kLWNsaXAnLCBhcmd1bWVudHMsIG9ubHk6IHdlYmtpdClcbiAgZWxzZVxuICAgIGxlZ2FjeS1iZy12YWx1ZXMoJ2JhY2tncm91bmQtY2xpcCcsIGFyZ3VtZW50cylcbiAgICBiYWNrZ3JvdW5kLWNsaXA6IGFyZ3VtZW50c1xuXG4vKlxuICogVmVuZG9yIFwiYmFja2dyb3VuZC1vcmlnaW5cIiBzdXBwb3J0LlxuICovXG5cbmJhY2tncm91bmQtb3JpZ2luKClcbiAgbGVnYWN5LWJnLXZhbHVlcygnYmFja2dyb3VuZC1vcmlnaW4nLCBhcmd1bWVudHMpXG4gIGJhY2tncm91bmQtb3JpZ2luOiBhcmd1bWVudHNcblxuLypcbiAqIFZlbmRvciBcImJhY2tncm91bmQtc2l6ZVwiIHN1cHBvcnQuXG4gKi9cblxuYmFja2dyb3VuZC1zaXplKClcbiAgdmVuZG9yKCdiYWNrZ3JvdW5kLXNpemUnLCBhcmd1bWVudHMsIG9ubHk6IHdlYmtpdCBtb3ogb2ZmaWNpYWwpXG5cbi8qXG4gKiBWZW5kb3IgXCJ0cmFuc2Zvcm1cIiBzdXBwb3J0LlxuICovXG5cbnRyYW5zZm9ybSgpXG4gIHZlbmRvcigndHJhbnNmb3JtJywgYXJndW1lbnRzKVxuXG4vKlxuICogVmVuZG9yIFwidHJhbnNmb3JtLW9yaWdpblwiIHN1cHBvcnQuXG4gKi9cbnRyYW5zZm9ybS1vcmlnaW4oKVxuICAgIHZlbmRvcigndHJhbnNmb3JtLW9yaWdpbicsIGFyZ3VtZW50cylcblxuLypcbiAqIFZlbmRvciBcInRyYW5zZm9ybS1zdHlsZVwiIHN1cHBvcnQuXG4gKi9cblxudHJhbnNmb3JtLXN0eWxlKClcbiAgdmVuZG9yKCd0cmFuc2Zvcm0tc3R5bGUnLCBhcmd1bWVudHMpXG5cbi8qXG4gKiBWZW5kb3IgXCJib3JkZXItaW1hZ2VcIiBzdXBwb3J0LlxuICovXG5cbmJvcmRlci1pbWFnZSgpXG4gIHZlbmRvcignYm9yZGVyLWltYWdlJywgYXJndW1lbnRzLCBvbmx5OiB3ZWJraXQgbW96IG8gb2ZmaWNpYWwpXG5cbi8qXG4gKiBWZW5kb3IgXCJ0cmFuc2l0aW9uXCIgc3VwcG9ydC5cbiAqL1xuXG50cmFuc2l0aW9uKClcbiAgdmVuZG9yKCd0cmFuc2l0aW9uJywgYXJndW1lbnRzKVxuXG4vKlxuICogVmVuZG9yIFwidHJhbnNpdGlvbi1wcm9wZXJ0eVwiIHN1cHBvcnQuXG4gKi9cblxudHJhbnNpdGlvbi1wcm9wZXJ0eSgpXG4gIHZlbmRvcigndHJhbnNpdGlvbi1wcm9wZXJ0eScsIGFyZ3VtZW50cylcblxuLypcbiAqIFZlbmRvciBcInRyYW5zaXRpb24tZHVyYXRpb25cIiBzdXBwb3J0LlxuICovXG5cbnRyYW5zaXRpb24tZHVyYXRpb24oKVxuICB2ZW5kb3IoJ3RyYW5zaXRpb24tZHVyYXRpb24nLCBhcmd1bWVudHMpXG5cbi8qXG4gKiBWZW5kb3IgXCJ0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvblwiIHN1cHBvcnQuXG4gKi9cblxudHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb24oKVxuICB2ZW5kb3IoJ3RyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uJywgYXJndW1lbnRzKVxuXG4vKlxuICogVmVuZG9yIFwidHJhbnNpdGlvbi1kZWxheVwiIHN1cHBvcnQuXG4gKi9cblxudHJhbnNpdGlvbi1kZWxheSgpXG4gIHZlbmRvcigndHJhbnNpdGlvbi1kZWxheScsIGFyZ3VtZW50cylcblxuLypcbiAqIFZlbmRvciBcImJhY2tmYWNlLXZpc2liaWxpdHlcIiBzdXBwb3J0LlxuICovXG5cbmJhY2tmYWNlLXZpc2liaWxpdHkoKVxuICB2ZW5kb3IoJ2JhY2tmYWNlLXZpc2liaWxpdHknLCBhcmd1bWVudHMsIG9ubHk6IHdlYmtpdCBtb3ogbXMgb2ZmaWNpYWwpXG5cbi8qXG4gKiBWZW5kb3IgXCJwZXJzcGVjdGl2ZVwiIHN1cHBvcnQuXG4gKi9cblxucGVyc3BlY3RpdmUoKVxuICBpZiBtaXhpblxuICAgIHZlbmRvcigncGVyc3BlY3RpdmUnLCBhcmd1bWVudHMsIG9ubHk6IHdlYmtpdCBtb3ogbXMgb2ZmaWNpYWwpXG4gIGVsc2VcbiAgICAncGVyc3BlY3RpdmUoJXMpJyAlIGFyZ3VtZW50c1xuXG4vKlxuICogVmVuZG9yIFwicGVyc3BlY3RpdmUtb3JpZ2luXCIgc3VwcG9ydC5cbiAqL1xuXG5wZXJzcGVjdGl2ZS1vcmlnaW4oKVxuICB2ZW5kb3IoJ3BlcnNwZWN0aXZlLW9yaWdpbicsIGFyZ3VtZW50cywgb25seTogd2Via2l0IG1veiBtcyBvZmZpY2lhbClcblxuLypcbiAqIE9wYWNpdHkgd2l0aCBjb25kaXRpb25hbCBJRSBzdXBwb3J0LlxuICovXG5cbm9wYWNpdHkobiwgYXJncy4uLilcbiAgb3BhY2l0eTogbiBhcmdzXG4gIGlmIHN1cHBvcnQtZm9yLWllXG4gICAgaWYgbiA9PSBpbmhlcml0IG9yIG4gPT0gaW5pdGlhbFxuICAgICAgLW1zLWZpbHRlcjogbiBhcmdzXG4gICAgICBmaWx0ZXI6IG4gYXJnc1xuICAgIGVsc2VcbiAgICAgIHZhbCA9IHJvdW5kKG4gKiAxMDApXG4gICAgICBpZiB2YWwgPT0gMTAwXG4gICAgICAgIC1tcy1maWx0ZXI6IG5vbmUgYXJnc1xuICAgICAgICBmaWx0ZXI6IG5vbmUgYXJnc1xuICAgICAgZWxzZVxuICAgICAgICAtbXMtZmlsdGVyOiAnXCJwcm9naWQ6RFhJbWFnZVRyYW5zZm9ybS5NaWNyb3NvZnQuQWxwaGEoT3BhY2l0eT0lcylcIicgJSB2YWwgYXJnc1xuICAgICAgICBmaWx0ZXI6ICdhbHBoYShvcGFjaXR5PSVzKScgJSB2YWwgYXJnc1xuXG4vKlxuICogVmVuZG9yIFwidGV4dC1zaXplLWFkanVzdFwiXG4gKi9cblxudGV4dC1zaXplLWFkanVzdCgpXG4gIHZlbmRvcigndGV4dC1zaXplLWFkanVzdCcsIGFyZ3VtZW50cylcblxuLypcbiAqIEFsaWFzIHRoZSBcIndoaXRlLXNwYWNlXCIgcHJvcGVydHkuXG4gKi9cblxud2hpdGVzcGFjZSgpXG4gIHdoaXRlLXNwYWNlOiBhcmd1bWVudHNcblxuLypcbiAqIFZlbmRvciBcImJveC1zaXppbmdcIiBzdXBwb3J0LlxuICovXG5cbmJveC1zaXppbmcoKVxuICB2ZW5kb3IoJ2JveC1zaXppbmcnLCBhcmd1bWVudHMsIG9ubHk6IHdlYmtpdCBtb3ogb2ZmaWNpYWwpXG5cbi8qXG4gKiBWZW5kb3IgXCJib3gtb3JpZW50XCIgc3VwcG9ydC5cbiAqL1xuXG5ib3gtb3JpZW50KClcbiAgdmVuZG9yKCdib3gtb3JpZW50JywgYXJndW1lbnRzLCBvbmx5OiB3ZWJraXQgbW96IG9mZmljaWFsKVxuXG4vKlxuICogVmVuZG9yIFwiYm94LWZsZXgtZ3JvdXBcIiBzdXBwb3J0LlxuICovXG5cbmJveC1mbGV4LWdyb3VwKClcbiAgdmVuZG9yKCdib3gtZmxleC1ncm91cCcsIGFyZ3VtZW50cywgb25seTogd2Via2l0IG1veiBvZmZpY2lhbClcblxuLypcbiAqIFZlbmRvciBcImJveC1vcmRpbmFsLWdyb3VwXCIgc3VwcG9ydC5cbiAqL1xuXG5ib3gtb3JkaW5hbC1ncm91cCgpXG4gIHZlbmRvcignYm94LW9yZGluYWwtZ3JvdXAnLCBhcmd1bWVudHMsIG9ubHk6IHdlYmtpdCBtb3ogbXMgb2ZmaWNpYWwpXG5cblxuLypcbiAqIFZlbmRvciBcImJveC1hbGlnblwiIHN1cHBvcnQuXG4gKi9cblxuYm94LWFsaWduKClcbiAgdmVuZG9yKCdib3gtYWxpZ24nLCBhcmd1bWVudHMsIG9ubHk6IHdlYmtpdCBtb3ogbXMgb2ZmaWNpYWwpXG5cbi8qXG4gKiBWZW5kb3IgXCJib3gtcGFja1wiIHN1cHBvcnQuXG4gKi9cblxuYm94LXBhY2soKVxuICB2ZW5kb3IoJ2JveC1wYWNrJywgYXJndW1lbnRzLCBvbmx5OiB3ZWJraXQgbW96IG1zIG9mZmljaWFsKVxuXG4vKlxuICogVmVuZG9yIFwiYm94LWRpcmVjdGlvblwiIHN1cHBvcnQuXG4gKi9cblxuYm94LWRpcmVjdGlvbigpXG4gIHZlbmRvcignYm94LWRpcmVjdGlvbicsIGFyZ3VtZW50cywgb25seTogd2Via2l0IG1veiBtcyBvZmZpY2lhbClcblxuLypcbiAqIFZlbmRvciBcImFuaW1hdGlvblwiIHN1cHBvcnQuXG4gKi9cblxuYW5pbWF0aW9uKClcbiAgdmVuZG9yKCdhbmltYXRpb24nLCBhcmd1bWVudHMpXG5cblxuLypcbiAqIFZlbmRvciBcImFuaW1hdGlvbi1uYW1lXCIgc3VwcG9ydC5cbiAqL1xuXG5hbmltYXRpb24tbmFtZSgpXG4gIHZlbmRvcignYW5pbWF0aW9uLW5hbWUnLCBhcmd1bWVudHMpXG5cbi8qXG4gKiBWZW5kb3IgXCJhbmltYXRpb24tZHVyYXRpb25cIiBzdXBwb3J0LlxuICovXG5cbmFuaW1hdGlvbi1kdXJhdGlvbigpXG4gIHZlbmRvcignYW5pbWF0aW9uLWR1cmF0aW9uJywgYXJndW1lbnRzKVxuXG4vKlxuICogVmVuZG9yIFwiYW5pbWF0aW9uLWRlbGF5XCIgc3VwcG9ydC5cbiAqL1xuXG5hbmltYXRpb24tZGVsYXkoKVxuICB2ZW5kb3IoJ2FuaW1hdGlvbi1kZWxheScsIGFyZ3VtZW50cylcblxuLypcbiAqIFZlbmRvciBcImFuaW1hdGlvbi1kaXJlY3Rpb25cIiBzdXBwb3J0LlxuICovXG5cbmFuaW1hdGlvbi1kaXJlY3Rpb24oKVxuICB2ZW5kb3IoJ2FuaW1hdGlvbi1kaXJlY3Rpb24nLCBhcmd1bWVudHMpXG5cbi8qXG4gKiBWZW5kb3IgXCJhbmltYXRpb24taXRlcmF0aW9uLWNvdW50XCIgc3VwcG9ydC5cbiAqL1xuXG5hbmltYXRpb24taXRlcmF0aW9uLWNvdW50KClcbiAgdmVuZG9yKCdhbmltYXRpb24taXRlcmF0aW9uLWNvdW50JywgYXJndW1lbnRzKVxuXG4vKlxuICogVmVuZG9yIFwiYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvblwiIHN1cHBvcnQuXG4gKi9cblxuYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbigpXG4gIHZlbmRvcignYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbicsIGFyZ3VtZW50cylcblxuLypcbiAqIFZlbmRvciBcImFuaW1hdGlvbi1wbGF5LXN0YXRlXCIgc3VwcG9ydC5cbiAqL1xuXG5hbmltYXRpb24tcGxheS1zdGF0ZSgpXG4gIHZlbmRvcignYW5pbWF0aW9uLXBsYXktc3RhdGUnLCBhcmd1bWVudHMpXG5cbi8qXG4gKiBWZW5kb3IgXCJhbmltYXRpb24tZmlsbC1tb2RlXCIgc3VwcG9ydC5cbiAqL1xuXG5hbmltYXRpb24tZmlsbC1tb2RlKClcbiAgdmVuZG9yKCdhbmltYXRpb24tZmlsbC1tb2RlJywgYXJndW1lbnRzKVxuXG4vKlxuICogVmVuZG9yIFwiaHlwaGVuc1wiIHN1cHBvcnQuXG4gKi9cblxuaHlwaGVucygpXG4gIHZlbmRvcignaHlwaGVucycsIGFyZ3VtZW50cywgb25seTogd2Via2l0IG1veiBtcyBvZmZpY2lhbClcblxuLypcbiAqIFZlbmRvciBcImFwcGVhcmFuY2VcIiBzdXBwb3J0LlxuICovXG5cbmFwcGVhcmFuY2UoKVxuICB2ZW5kb3IoJ2FwcGVhcmFuY2UnLCBhcmd1bWVudHMsIG9ubHk6IHdlYmtpdCBtb3ogb2ZmaWNpYWwpXG5cbi8qXG4gKiBWZW5kb3IgXCJ0YWItc2l6ZVwiIHN1cHBvcnQuXG4gKi9cblxudGFiLXNpemUoKVxuICB2ZW5kb3IoJ3RhYi1zaXplJywgYXJndW1lbnRzLCBvbmx5OiBtb3ogbyBvZmZpY2lhbClcblxuLypcbiAqIFZlbmRvciBcIm92ZXJmbG93LXNjcm9sbGluZ1wiIHN1cHBvcnQuXG4gKi9cblxub3ZlcmZsb3ctc2Nyb2xsaW5nKClcbiAgdmVuZG9yKCdvdmVyZmxvdy1zY3JvbGxpbmcnLCBhcmd1bWVudHMsIG9ubHk6IHdlYmtpdCBvZmZpY2lhbClcblxuLypcbiAqIFZlbmRvciBcInRleHQtb3ZlcmZsb3dcIiBzdXBwb3J0LCAsIC1vLSBmb3Igb3BlcmEgOS4qIC0gMTAuKlxuICovXG5cbnRleHQtb3ZlcmZsb3coKVxuICB2ZW5kb3IoJ3RleHQtb3ZlcmZsb3cnLCBhcmd1bWVudHMsIG9ubHk6IG9mZmljaWFsIG8pXG5cbi8qXG4gKiBWZW5kb3IgXCJ0ZXh0LXNpemUtYWRqdXN0XCIgc3VwcG9ydC5cbiAqL1xudGV4dC1zaXplLWFkanVzdCgpXG4gIHZlbmRvcigndGV4dC1zaXplLWFkanVzdCcsIGFyZ3VtZW50cywgb25seTogb2ZmaWNpYWwgd2Via2l0IG1zKVxuXG4vKlxuICogVmVuZG9yIFwiZm9udC1zbW9vdGhpbmdcIiBzdXBwb3J0LCB3ZWJraXQgb25seS5cbiAqL1xuZm9udC1zbW9vdGhpbmcoKVxuICB2ZW5kb3IoJ2ZvbnQtc21vb3RoaW5nJywgYXJndW1lbnRzLCBvbmx5OiB3ZWJraXQpXG5cblxuLyoqXG4gKiBWZW5kb3IgaW5wdXQtcGxhY2Vob2xkZXIvcGxhY2Vob2xkZXIgc3VwcG9ydC5cbiAqXG4gKiBFeGFtcGxlczpcbiAqICAgIC8vIERlZmF1bHQgc3ludGF4XG4gKiAgICBib2R5XG4gKiAgICAgIHBsYWNlaG9sZGVyKGNvbG9yICMzMzMsIGZvbnQtd2VpZ2h0IG5vcm1hbClcbiAqXG4gKiAgICAvLyBUaGUgY29tbWEgaXMgaW1wb3J0YW50XG4gKiAgICAucGxhY2Vob2xkZXItcmVkXG4gKiAgICAgIHBsYWNlaG9sZGVyKGNvbG9yIHJlZCwpXG4gKlxuICogICAgLy8gV2UgY2FuIHBhc3MgYSBmdW5jdGlvblxuICogICAgZ3JlZW4tcGxhY2Vob2xkZXIoKVxuICogICAgICBjb2xvciBncmVlblxuICogICAgLnBsYWNlaG9sZGVyLWdyZWVuXG4gKiAgICAgIHBsYWNlaG9sZGVyKGdyZWVuLXBsYWNlaG9sZGVyKVxuICpcbiAqICAgIC8vIFdlIGNhbiBwYXNzIGEgaGFzaFxuICogICAgdGV4dGFyZWFcbiAqICAgICAgcGxhY2Vob2xkZXIoKGZvbnQtc3R5bGUgaXRhbGljKSAoZm9udC13ZWlnaHQgYm9sZCkgKHBhZGRpbmcgJzRweCAxMHB4JykpXG4gKi9cbnBsYWNlaG9sZGVyKClcbiAgZm9yIHYgaW4gJzotd2Via2l0LWlucHV0JyAnLW1veicgJzotbW96JyAnLW1zLWlucHV0J1xuICAgICY6e3Z9LXBsYWNlaG9sZGVyXG4gICAgICBmb3IgcGFpciBpbiBhcmd1bWVudHNcbiAgICAgICAgaWYgdHlwZW9mKHBhaXIpID09ICdmdW5jdGlvbidcbiAgICAgICAgICBwYWlyKClcbiAgICAgICAgZWxzZSBpZiBwYWlyIGlzIG5vdCBudWxsICYmIHBhaXJbMF0gaXMgbm90IG51bGxcbiAgICAgICAgICB7cGFpclswXX06IHR5cGUocGFpclsxXSkgPT0gJ3N0cmluZycgPyBzKHBhaXJbMV0pIDogcGFpclsxXVxuaW5wdXQtcGxhY2Vob2xkZXIgPSBwbGFjZWhvbGRlclxuXG4vKlxuICogVmVuZG9yIGJhY2tncm91bmQgc3VwcG9ydCAoZ3JhZGllbnRzKS5cbiAqL1xuXG5iYWNrZ3JvdW5kKClcbiAgaWYgbWF0Y2goJy1ncmFkaWVudFxcKCcsICcnK2FyZ3VtZW50cylcbiAgICB2ZW5kb3IoJ2JhY2tncm91bmQnLCBhcmd1bWVudHMsIHZlbmRvci1wcm9wZXJ0eTogZmFsc2UpXG4gIGVsc2VcbiAgICBiYWNrZ3JvdW5kIGFyZ3VtZW50c1xuXG5iYWNrZ3JvdW5kLWltYWdlKClcbiAgaWYgbWF0Y2goJy1ncmFkaWVudFxcKCcsICcnK2FyZ3VtZW50cylcbiAgICB2ZW5kb3IoJ2JhY2tncm91bmQtaW1hZ2UnLCBhcmd1bWVudHMsIHZlbmRvci1wcm9wZXJ0eTogZmFsc2UpXG4gIGVsc2VcbiAgICBiYWNrZ3JvdW5kLWltYWdlIGFyZ3VtZW50c1xuXG5jdXJzb3IoKVxuICBpZiBtYXRjaCgnLWdyYWRpZW50XFwoJywgJycrYXJndW1lbnRzKVxuICAgIHZlbmRvcignY3Vyc29yJywgYXJndW1lbnRzLCB2ZW5kb3ItcHJvcGVydHk6IGZhbHNlKVxuICBlbHNlXG4gICAgY3Vyc29yIGFyZ3VtZW50c1xuXG5saXN0LXN0eWxlKClcbiAgaWYgbWF0Y2goJy1ncmFkaWVudFxcKCcsICcnK2FyZ3VtZW50cylcbiAgICB2ZW5kb3IoJ2xpc3Qtc3R5bGUnLCBhcmd1bWVudHMsIHZlbmRvci1wcm9wZXJ0eTogZmFsc2UpXG4gIGVsc2VcbiAgICBsaXN0LXN0eWxlIGFyZ3VtZW50c1xuXG5saXN0LXN0eWxlLWltYWdlKClcbiAgaWYgbWF0Y2goJy1ncmFkaWVudFxcKCcsICcnK2FyZ3VtZW50cylcbiAgICB2ZW5kb3IoJ2xpc3Qtc3R5bGUtaW1hZ2UnLCBhcmd1bWVudHMsIHZlbmRvci1wcm9wZXJ0eTogZmFsc2UpXG4gIGVsc2VcbiAgICBsaXN0LXN0eWxlLWltYWdlIGFyZ3VtZW50c1xuIiwiLypcbiAqIFZlbmRvciBcImRpc3BsYXk6IGZsZXhcIiBzdXBwb3J0IHdpdGggZmFsbGJhY2sgdG8gb2Jzb2xldGUgdmVyc2lvbnMuXG4gKi9cblxuZmxleC12ZXJzaW9uID89IGJveCBmbGV4XG5cbi8vXG4vLyAxLiBEaXNwbGF5IHZhbHVlc1xuLy8gICAgLSBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLWZsZXhib3gvI2ZsZXgtY29udGFpbmVyc1xuLy9cbmRpc3BsYXkodHlwZSwgYXJncy4uLilcbiAgaWYgZmxleCA9PSB0eXBlIHx8IGlubGluZS1mbGV4ID09IHR5cGVcbiAgICBpZiBib3ggaW4gZmxleC12ZXJzaW9uXG4gICAgICBpZiBmbGV4ID09IHR5cGVcbiAgICAgICAgZGlzcGxheTogLW1zLWZsZXhib3ggYXJnc1xuICAgICAgICBkaXNwbGF5OiB2ZW5kb3ItdmFsdWUoYm94IGFyZ3MsIG9ubHk6IG1veiB3ZWJraXQpXG4gICAgICBlbHNlXG4gICAgICAgIGRpc3BsYXk6IC1tcy1pbmxpbmUtZmxleGJveCBhcmdzXG4gICAgICAgIGRpc3BsYXk6IHZlbmRvci12YWx1ZShpbmxpbmUtYm94IGFyZ3MsIG9ubHk6IG1veiB3ZWJraXQpXG4gICAgaWYgZmxleCBpbiBmbGV4LXZlcnNpb25cbiAgICAgIGRpc3BsYXk6IHZlbmRvci12YWx1ZShhcmd1bWVudHMsIG9ubHk6IHdlYmtpdCBvZmZpY2lhbCkgLy8gb3ZlcndyaXRlcyBvbGQgd2Via2l0XG4gIGVsc2VcbiAgICBkaXNwbGF5OiBhcmd1bWVudHNcblxuLypcbiAqIE5ldyBzeW50YXggZm9yIGJyb3dzZXJzIGxpa2UgR29vZ2xlIENocm9tZS5cbiAqIFBsdXMgYSB0cmFuc2xhdGlvbiB0byB0aGUgb2xkIHN5bnRheCwgaWYgcG9zc2libGUuXG4gKi9cblxuXG4vL1xuLy8gNS4gT3JkZXJpbmcgYW5kIE9yaWVudGF0aW9uXG4vLyAgICAtIGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtZmxleGJveC8jb3JkZXJpbmctYW5kLW9yaWVudGF0aW9uXG4vL1xuLWZsZXgtb2Jzb2xldGUtZGlyZWN0aW9uKGRpcmVjdGlvbilcbiAgaWYgYm94IGluIGZsZXgtdmVyc2lvblxuICAgIGlmIHJvdy1yZXZlcnNlID09IGRpcmVjdGlvbiB8fCBjb2x1bW4tcmV2ZXJzZSA9PSBkaXJlY3Rpb25cbiAgICAgIHZlbmRvcignYm94LWRpcmVjdGlvbicsIHJldmVyc2UsIGlnbm9yZTogbXMgb2ZmaWNpYWwpXG5cbiAgICBpZiByb3cgPT0gZGlyZWN0aW9uIHx8IHJvdy1yZXZlcnNlID09IGRpcmVjdGlvblxuICAgICAgdmVuZG9yKCdib3gtb3JpZW50JywgaG9yaXpvbnRhbCwgaWdub3JlOiBtcyBvZmZpY2lhbClcbiAgICBlbHNlIGlmIGNvbHVtbiA9PSBkaXJlY3Rpb24gfHwgY29sdW1uLXJldmVyc2UgPT0gZGlyZWN0aW9uXG4gICAgICB2ZW5kb3IoJ2JveC1vcmllbnQnLCB2ZXJ0aWNhbCwgaWdub3JlOiBtcyBvZmZpY2lhbClcblxuLWZsZXgtb2Jzb2xldGUtd3JhcCh2YWx1ZSlcbiAgaWYgYm94IGluIGZsZXgtdmVyc2lvblxuICAgIC8vIFdBUk46IHdyYXAtcmV2ZXJzZSBkb2VzIG5vdCBoYXZlIGEgYm94IGVxdWl2YWxlbnQuIFRoaXMgd2lsbCByZW5kZXIgaW4gZGlmZmVyZW50IG1hbm5lcnNcbiAgICAvLyAgICBvbiBib3ggdnMuIGZsZXggdmFsdWVzLlxuICAgIGlmICd3cmFwJyA9PSB2YWx1ZSB8fCB3cmFwLXJldmVyc2UgPT0gdmFsdWVcbiAgICAgIHZlbmRvcignYm94LWxpbmVzJywgbXVsdGlwbGUsIGlnbm9yZTogbXMgb2ZmaWNpYWwpXG4gICAgZWxzZSBpZiBub3dyYXAgPT0gdmFsdWVcbiAgICAgIHZlbmRvcignYm94LWxpbmVzJywgc2luZ2xlLCBpZ25vcmU6IG1zIG9mZmljaWFsKVxuXG5mbGV4LWRpcmVjdGlvbihkaXJlY3Rpb24pXG4gIC8vIG9ic29sZXRlXG4gIC1mbGV4LW9ic29sZXRlLWRpcmVjdGlvbihkaXJlY3Rpb24pXG5cbiAgLy8gbmV3XG4gIGlmIGZsZXggaW4gZmxleC12ZXJzaW9uXG4gICAgdmVuZG9yKCdmbGV4LWRpcmVjdGlvbicsIGFyZ3VtZW50cywgb25seTogd2Via2l0IG1zIG9mZmljaWFsKVxuXG5mbGV4LXdyYXAodmFsdWUpXG4gIC8vIG9ic29sZXRlXG4gIC1mbGV4LW9ic29sZXRlLXdyYXAodmFsdWUpXG5cbiAgaWYgZmxleCBpbiBmbGV4LXZlcnNpb25cbiAgICB2ZW5kb3IoJ2ZsZXgtd3JhcCcsIGFyZ3VtZW50cywgb25seTogd2Via2l0IG1zIG9mZmljaWFsKVxuXG5mbGV4LWZsb3coKVxuICAvLyBvYnNvbGV0ZVxuICAtZmxleC1vYnNvbGV0ZS1kaXJlY3Rpb24oYXJndW1lbnRzWzBdKVxuICAtZmxleC1vYnNvbGV0ZS1kaXJlY3Rpb24oYXJndW1lbnRzWzFdKVxuICAtZmxleC1vYnNvbGV0ZS13cmFwKGFyZ3VtZW50c1swXSlcbiAgLWZsZXgtb2Jzb2xldGUtd3JhcChhcmd1bWVudHNbMV0pXG5cbiAgLy8gbmV3XG4gIGlmIGZsZXggaW4gZmxleC12ZXJzaW9uXG4gICAgdmVuZG9yKCdmbGV4LWZsb3cnLCBhcmd1bWVudHMsIG9ubHk6IHdlYmtpdCBtcyBvZmZpY2lhbClcblxuXG5vcmRlcigpXG4gIC8vIG9ic29sZXRlXG4gIGlmIGJveCBpbiBmbGV4LXZlcnNpb25cbiAgICB2ZW5kb3IoJ2JveC1vcmRpbmFsLWdyb3VwJywgYXJndW1lbnRzLCBpZ25vcmU6IG1zIG9mZmljaWFsKVxuXG4gIC8vIG5ld1xuICBpZiBmbGV4IGluIGZsZXgtdmVyc2lvblxuICAgIHZlbmRvcignZmxleC1vcmRlcicsIGFyZ3VtZW50cywgb25seTogbXMpXG4gICAgdmVuZG9yKCdvcmRlcicsIGFyZ3VtZW50cywgb25seTogd2Via2l0IG9mZmljaWFsKVxuXG5cbi8vXG4vLyA3LiBGbGV4aWJpbGl0eVxuLy8gICAgLSBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLWZsZXhib3gvI2ZsZXhpYmlsaXR5XG4vL1xuZmxleC1ncm93KGdyb3d0aClcbiAgLy8gb2Jzb2xldGVcbiAgaWYgYm94IGluIGZsZXgtdmVyc2lvblxuICAgIHZlbmRvcignYm94LWZsZXgnLCBncm93dGgpXG5cbiAgLy8gbmV3XG4gIGlmIGZsZXggaW4gZmxleC12ZXJzaW9uXG4gICAgdmVuZG9yKCdmbGV4LWdyb3cnLCBhcmd1bWVudHMsIG9ubHk6IHdlYmtpdCBvZmZpY2lhbClcblxuZmxleC1iYXNpcygpXG4gIGlmIGZsZXggaW4gZmxleC12ZXJzaW9uXG4gICAgdmVuZG9yKCdmbGV4LWJhc2lzJywgYXJndW1lbnRzLCBvbmx5OiB3ZWJraXQgb2ZmaWNpYWwpXG5cbmZsZXgtc2hyaW5rKClcbiAgaWYgZmxleCBpbiBmbGV4LXZlcnNpb25cbiAgICB2ZW5kb3IoJ2ZsZXgtc2hyaW5rJywgYXJndW1lbnRzLCBvbmx5OiB3ZWJraXQgb2ZmaWNpYWwpXG5cbmZsZXgoZ3Jvd3RoKVxuXG4gIC8vIG9ic29sZXRlXG4gIGlmIGJveCBpbiBmbGV4LXZlcnNpb25cbiAgICBzaHJpbmsgPSAxXG5cbiAgICBpZiBub25lID09IGdyb3d0aCB8fCBpbml0aWFsID09IGdyb3d0aFxuICAgICAgLy8gV2VsbCBrbm93biB2YWx1ZXNcbiAgICAgIHNocmluayA9IDAgaWYgbm9uZSA9PSBncm93dGhcbiAgICAgIGdyb3d0aCA9IDBcbiAgICBlbHNlIGlmIGlzLXdpZHRoKGdyb3d0aCkgPT0gdHJ1ZVxuICAgICAgLy8gQmFzaXMgaXMgZGVmaW5lZCBhcyB0aGUgZmlyc3QgcGFyYW1ldGVyXG4gICAgICBncm93dGggPSBhcmd1bWVudHNbMV0gfHwgMFxuICAgICAgc2hyaW5rID0gYXJndW1lbnRzWzJdIGlmIDMgPD0gbGVuZ3RoKGFyZ3VtZW50cylcbiAgICBlbHNlIGlmIGFyZ3VtZW50c1sxXSAmJiBpcy13aWR0aChhcmd1bWVudHNbMV0pID09IGZhbHNlXG4gICAgICAvLyBHcm93dGggaXMgZmlyc3QgYW5kIHNocmluayBpcyBzZWNvbmRcbiAgICAgIHNocmluayA9IGFyZ3VtZW50c1sxXVxuXG4gICAgLy8gU2luY2Ugd2UgY2FuJ3QgbWFrZSB0aGUgZGlzdGluY3Rpb24gYmV0d2VlbiBncm93aW5nIGFuZCBzaHJpbmtpbmcgaW4gdGhlIGJveCBtb2RlbCwgdGFrZVxuICAgIC8vIHRoZSBvbmUgdGhhdCBwcm92aWRlcyB0aGUgbW9zdCBmbGV4aWJpbGl0eS5cbiAgICB2ZW5kb3IoJ2JveC1mbGV4JywgbWF4KGdyb3d0aCwgc2hyaW5rKSwgaWdub3JlOiBtcylcblxuICAvLyBuZXdcbiAgaWYgZmxleCBpbiBmbGV4LXZlcnNpb25cbiAgICB2ZW5kb3IoJ2ZsZXgnLCBhcmd1bWVudHMsIG9ubHk6IHdlYmtpdCBtcyBvZmZpY2lhbClcblxuXG4vLyBjb252ZXJ0cyB0aGUganVzdGlmaWNhdGlvbiBhbGlnbm1lbnRcbi1jb252ZXJ0LWp1c3RpZnkoYWxpZ24pXG4gIGlmIGZsZXgtc3RhcnQgPT0gYWxpZ25cbiAgICByZXR1cm4gc3RhcnRcbiAgZWxzZSBpZiBmbGV4LWVuZCA9PSBhbGlnblxuICAgIHJldHVybiBlbmRcbiAgZWxzZSBpZiBzcGFjZS1hcm91bmQgPT0gYWxpZ25cbiAgICByZXR1cm4gZGlzdHJpYnV0ZVxuICBlbHNlIGlmIHNwYWNlLWJldHdlZW4gPT0gYWxpZ25cbiAgICByZXR1cm4ganVzdGlmeVxuICBlbHNlXG4gICAgcmV0dXJuIGFsaWduXG5cbi8vXG4vLyA4LiBBbGlnbm1lbnRcbi8vICAgIC0gaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1mbGV4Ym94LyNhbGlnbm1lbnRcbi8vXG5qdXN0aWZ5LWNvbnRlbnQoYWxpZ24pXG4gIC8vIG9ic29sZXRlXG4gIGlmIGJveCBpbiBmbGV4LXZlcnNpb25cbiAgICB2ZW5kb3IoJ2JveC1wYWNrJywgLWNvbnZlcnQtanVzdGlmeShhbGlnbiksIGlnbm9yZTogbXMgb2ZmaWNpYWwpXG5cbiAgLy8gbmV3XG4gIGlmIGZsZXggaW4gZmxleC12ZXJzaW9uXG4gICAgdmVuZG9yKCdmbGV4LXBhY2snLCAtY29udmVydC1qdXN0aWZ5KGFsaWduKSwgb25seTogbXMpXG4gICAgdmVuZG9yKCdqdXN0aWZ5LWNvbnRlbnQnLCBhbGlnbiwgb25seTogd2Via2l0IG9mZmljaWFsKVxuXG5hbGlnbi1jb250ZW50KGFsaWduKVxuICAvLyBXQVJOOiBPYnNvbGV0ZSBzcGVjIGRvZXMgbm90IGFsbG93IGZvciBhZGp1c3RtZW50IGhlcmVcbiAgaWYgZmxleCBpbiBmbGV4LXZlcnNpb25cbiAgICB2ZW5kb3IoJ2ZsZXgtbGluZS1wYWNrJywgLWNvbnZlcnQtanVzdGlmeShhbGlnbiksIG9ubHk6IG1zKVxuICAgIHZlbmRvcignYWxpZ24tY29udGVudCcsIGFsaWduLCBvbmx5OiB3ZWJraXQgb2ZmaWNpYWwpXG5cbi8vIGNvbnZlcnRzIGFsaWdubWVudCBmcm9tICdmbGV4JyB0byBub3JtYWwgdmFsdWVcbi1jb252ZXJ0LWFsaWdubWVudChhbGlnbilcbiAgaWYgZmxleC1zdGFydCA9PSBhbGlnblxuICAgIHJldHVybiBzdGFydFxuICBlbHNlIGlmIGZsZXgtZW5kID09IGFsaWduXG4gICAgcmV0dXJuIGVuZFxuICBlbHNlXG4gICAgcmV0dXJuIGFsaWduXG5cbmFsaWduLWl0ZW1zKGFsaWduKVxuICAvLyBvYnNvbGV0ZVxuICBpZiBib3ggaW4gZmxleC12ZXJzaW9uXG4gICAgdmVuZG9yKCdib3gtYWxpZ24nLCAtY29udmVydC1hbGlnbm1lbnQoYWxpZ24pLCBpZ25vcmU6IG1zIG9mZmljaWFsKVxuXG4gIC8vIG5ld1xuICBpZiBmbGV4IGluIGZsZXgtdmVyc2lvblxuICAgIHZlbmRvcignZmxleC1hbGlnbicsIC1jb252ZXJ0LWFsaWdubWVudChhbGlnbiksIG9ubHk6IG1zKVxuICAgIHZlbmRvcignYWxpZ24taXRlbXMnLCBhcmd1bWVudHMsIG9ubHk6IHdlYmtpdCBvZmZpY2lhbClcblxuYWxpZ24tc2VsZihhbGlnbilcbiAgLy8gV0FSTjogT2Jzb2xldGUgc3BlYyBkb2VzIG5vdCBhbGxvdyBmb3Igb3ZlcnJpZGluZyBhbGlnbm1lbnQgb24gaW5kaXZpZHVhbCBpdGVtcy5cbiAgaWYgZmxleCBpbiBmbGV4LXZlcnNpb25cbiAgICB2ZW5kb3IoJ2FsaWduLXNlbGYnLCBhbGlnbiwgb25seTogd2Via2l0IG9mZmljaWFsKVxuICAgIHZlbmRvcignZmxleC1pdGVtLWFsaWduJywgLWNvbnZlcnQtYWxpZ25tZW50KGFsaWduKSwgb25seTogbXMpXG4iLCIkcGFwZXIgPSAjZWNlMmQ2O1xuJGhpZ2hsaWdodCA9ICNmYjI3Njg7XG4kZGFya0hpZ2hsaWdodCA9ICM2YjNiM2I7XG4kdGV4dENvbG9yID0gIzhjODM4OTtcbiR3aGl0ZSA9ICNmZmY7XG5cbmJvZHkge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAkcGFwZXI7XG4gIGNvbG9yOiAkdGV4dENvbG9yO1xufVxuIiwiJGJvZHlGb250ID0gXCJSaW5nc2lkZSBSZWd1bGFyIEFcIiwgXCJSaW5nc2lkZSBSZWd1bGFyIEJcIiwgc2Fucy1zZXJpZjtcbiRoZWFkaW5nRm9udCA9IFwiVHVuZ3N0ZW4gUm91bmRlZCBBXCIsIFwiVHVuZ3N0ZW4gUm91bmRlZCBCXCIsIHNhbnMtc2VyaWY7XG5cbiRyZW0odmFsdWUpIHtcbiAgcmV0dXJuIHVuaXQoKHZhbHVlLzE2KSwgJ3JlbScpO1xufVxuXG5odG1sIHtcbiAgZm9udC1zaXplOiAxMDAlO1xuXG4gIEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6ICRtZWRpdW0pIHtcbiAgICBmb250LXNpemU6IDg1JTtcbiAgfVxuXG4gIEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6ICRzbWFsbCkge1xuICAgIGZvbnQtc2l6ZTogNzAlO1xuICB9XG59XG5cbmJvZHkge1xuICBmb250LWZhbWlseTogJGJvZHlGb250O1xufVxuXG4ucGFnZS10aXRsZSB7XG4gIGNvbG9yOiAkaGlnaGxpZ2h0O1xuICBmb250LWZhbWlseTogJGhlYWRpbmdGb250O1xuICBmb250LXNpemU6ICRyZW0oMTEwcHgpO1xuICBmb250LXdlaWdodDogNzAwO1xuICBsaW5lLWhlaWdodDogJHJlbSgxMDBweCk7XG4gIG1hcmdpbi1ib3R0b206ICRyZW0oMzBweCk7XG59XG5cbi5wYWdlLWhlYWRlciB7XG4gIG1hcmdpbi1ib3R0b206ICRyZW0oMzBweCk7XG5cbiAgLmJ1dHRvbiB7XG4gICAgbWFyZ2luLXRvcDogJHJlbSg0MHB4KTtcbiAgfVxuXG4gIEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6ICRzbWFsbCkge1xuICAgIC5wYWdlLXRpdGxlLnB1bGwtbGVmdCB7XG4gICAgICBmbG9hdDogbm9uZTtcbiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICB9XG4gICAgLmJ1dHRvbi5wdWxsLXJpZ2h0IHtcbiAgICAgIGRpc3BsYXk6IGJsb2NrXG4gICAgICBmbG9hdDogbm9uZTtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgbWFyZ2luLXRvcDogJHJlbSgyMHB4KTtcbiAgICAgIG1hcmdpbi1ib3R0b206ICRyZW0oMjBweCk7XG4gICAgfVxuICB9XG59XG4iLCIqIHtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbn1cblxuLmNvbnRhaW5lciB7XG4gIG1heC13aWR0aDogMTMwMHB4O1xuICBtYXJnaW4tbGVmdDogYXV0bztcbiAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xuICBwYWRkaW5nLWxlZnQ6ICRyZW0oNDJweCk7XG4gIHBhZGRpbmctcmlnaHQ6ICRyZW0oNDJweCk7XG59XG5cbi5jbGVhcmZpeCB7XG4gIGNsZWFyZml4KCk7XG59XG5cbi5wdWxsLWxlZnQge1xuICBmbG9hdDogbGVmdDtcbn1cblxuLnB1bGwtcmlnaHQge1xuICBmbG9hdDogcmlnaHQ7XG59XG4iLCJjb2x1bW4oJHJhdGlvcyA9IDEsICRvZmZzZXQgPSAwLCAkY3ljbGUgPSAwLCAkZ3V0dGVyID0gJGplZXQuZ3V0dGVyLCAkY2xlYXJmaXggPSB0cnVlLCAkbnRoID0gJGplZXQubnRoKVxyXG4gIHNpZGUgPSBfZ2V0LWxheW91dC1kaXJlY3Rpb24oKVxyXG4gIG9wcG9zaXRlLXNpZGUgPSBvcHBvc2l0ZS1wb3NpdGlvbihzaWRlKVxyXG4gIGNvbHVtbi13aWR0aHMgPSBfZ2V0LWNvbHVtbigkcmF0aW9zLCAkZ3V0dGVyKVxyXG4gIG1hcmdpbi1sYXN0ID0gMFxyXG4gIG1hcmdpbi1sID0gbWFyZ2luLWxhc3RcclxuICBtYXJnaW4tciA9IGNvbHVtbi13aWR0aHNbMV1cclxuICAkbnRoLXNlbGVjdG9yID0gXCJudGgtY2hpbGRcIlxyXG4gIGlmICRudGggaXMgXCJ0eXBlXCJcclxuICAgICRudGgtc2VsZWN0b3IgPSBcIm50aC1vZi10eXBlXCJcclxuXHJcbiAgdW5sZXNzICRvZmZzZXQgPT0gMFxyXG4gICAgaWYgJG9mZnNldCA8IDBcclxuICAgICAgJG9mZnNldCAqPSAtMVxyXG4gICAgICAkb2Zmc2V0ID0gX2dldC1jb2x1bW4oJG9mZnNldCwgY29sdW1uLXdpZHRoc1sxXSlbMF1cclxuICAgICAgbWFyZ2luLXIgPSBtYXJnaW4tbGFzdCA9ICRvZmZzZXQgKyBjb2x1bW4td2lkdGhzWzFdICogMlxyXG4gICAgZWxzZVxyXG4gICAgICAkb2Zmc2V0ID0gX2dldC1jb2x1bW4oJG9mZnNldCwgY29sdW1uLXdpZHRoc1sxXSlbMF1cclxuICAgICAgbWFyZ2luLWwgPSAkb2Zmc2V0ICsgY29sdW1uLXdpZHRoc1sxXVxyXG5cclxuICBpZiAkY2xlYXJmaXhcclxuICAgIGNsZWFyZml4KClcclxuXHJcbiAgZmxvYXQ6IHNpZGVcclxuICBjbGVhcjogbm9uZVxyXG4gIHRleHQtYWxpZ246IGluaGVyaXRcclxuICB3aWR0aDogKGNvbHVtbi13aWR0aHNbMF0pJVxyXG4gIG1hcmdpbi17c2lkZX06IChtYXJnaW4tbCklXHJcbiAgbWFyZ2luLXtvcHBvc2l0ZS1zaWRlfTogKG1hcmdpbi1yKSVcclxuXHJcbiAgaWYgJGN5Y2xlICE9IDBcclxuICAgICY6eyRudGgtc2VsZWN0b3J9KG4pXHJcbiAgICAgIG1hcmdpbi17b3Bwb3NpdGUtc2lkZX06IChtYXJnaW4tciklXHJcbiAgICAgIGZsb2F0OiBzaWRlXHJcbiAgICAgIGNsZWFyOiBub25lXHJcblxyXG4gICAgJjp7JG50aC1zZWxlY3Rvcn0oeyRjeWNsZX1uKVxyXG4gICAgICBtYXJnaW4te29wcG9zaXRlLXNpZGV9OiAobWFyZ2luLWxhc3QpJVxyXG4gICAgICBmbG9hdDogb3Bwb3NpdGUtc2lkZVxyXG5cclxuICAgICY6eyRudGgtc2VsZWN0b3J9KHskY3ljbGV9biArIDEpXHJcbiAgICAgIGNsZWFyOiBib3RoXHJcbiAgZWxzZVxyXG4gICAgJjpsYXN0LWNoaWxkXHJcbiAgICAgIG1hcmdpbi17b3Bwb3NpdGUtc2lkZX06IChtYXJnaW4tbGFzdCklXHJcblxyXG5cclxuY29sdW1uLXdpZHRoKCRyYXRpb3MgPSAxLCAkZ3V0dGVyID0gJGplZXQuZ3V0dGVyKVxyXG4gICRyYXRpb3MgPSBfcmV2ZXJzZSgkcmF0aW9zKSB1bmxlc3MgJGplZXQucGFyZW50LWZpcnN0IGlzIHRydWVcclxuICB3ID0gMTAwXHJcblxyXG4gIGZvciByYXRpbyBpbiAkcmF0aW9zXHJcbiAgICB3ID0gMTAwICogcmF0aW8gLSAkZ3V0dGVyICsgcmF0aW8gKiAkZ3V0dGVyXHJcblxyXG4gIHJldHVybiB3ICsgJyUnXHJcblxyXG5cclxuY29sdW1uLWd1dHRlcigkcmF0aW9zID0gMSwgJGd1dHRlciA9ICRqZWV0Lmd1dHRlcilcclxuICAkcmF0aW9zID0gX3JldmVyc2UoJHJhdGlvcykgdW5sZXNzICRqZWV0LnBhcmVudC1maXJzdCBpcyB0cnVlXHJcbiAgdyA9IDEwMFxyXG5cclxuICBmb3IgcmF0aW8gaW4gJHJhdGlvc1xyXG4gICAgJGd1dHRlciA9ICRndXR0ZXIgLyB3ICogMTAwXHJcblxyXG4gIHJldHVybiAkZ3V0dGVyICsgJyUnXHJcblxyXG5cclxuc3BhbigkcmF0aW8gPSAxLCAkb2Zmc2V0ID0gMCwgJGN5Y2xlID0gMCwgJGNsZWFyZml4ID0gdHJ1ZSwgJG50aCA9ICRqZWV0Lm50aClcclxuICBzaWRlID0gX2dldC1sYXlvdXQtZGlyZWN0aW9uKClcclxuICBvcHBvc2l0ZS1zaWRlID0gb3Bwb3NpdGUtcG9zaXRpb24oc2lkZSlcclxuICBzcGFuLXdpZHRoID0gX2dldC1zcGFuKCRyYXRpbylcclxuICBtYXJnaW4tciA9IDBcclxuICBtYXJnaW4tbCA9IG1hcmdpbi1yXHJcbiAgJG50aC1zZWxlY3RvciA9IFwibnRoLWNoaWxkXCJcclxuICBpZiAkbnRoIGlzIFwidHlwZVwiXHJcbiAgICAkbnRoLXNlbGVjdG9yID0gXCJudGgtb2YtdHlwZVwiXHJcblxyXG5cclxuICB1bmxlc3MgJG9mZnNldCA9PSAwXHJcbiAgICBpZiAkb2Zmc2V0IDwgMFxyXG4gICAgICAkb2Zmc2V0ICo9IC0xXHJcbiAgICAgIG1hcmdpbi1yID0gX2dldC1zcGFuKCRvZmZzZXQpXHJcbiAgICBlbHNlXHJcbiAgICAgIG1hcmdpbi1sID0gX2dldC1zcGFuKCRvZmZzZXQpXHJcblxyXG4gIGlmICRjbGVhcmZpeFxyXG4gICAgY2xlYXJmaXgoKVxyXG5cclxuICBmbG9hdDogc2lkZVxyXG4gIGNsZWFyOiBub25lXHJcbiAgdGV4dC1hbGlnbjogaW5oZXJpdFxyXG4gIHdpZHRoOiAoc3Bhbi13aWR0aCklXHJcbiAgbWFyZ2luLXtzaWRlfTogKG1hcmdpbi1sKSVcclxuICBtYXJnaW4te29wcG9zaXRlLXNpZGV9OiAobWFyZ2luLXIpJVxyXG5cclxuICBpZiAkY3ljbGUgIT0gMFxyXG4gICAgJjp7JG50aC1zZWxlY3Rvcn0obilcclxuICAgICAgZmxvYXQ6IHNpZGVcclxuICAgICAgY2xlYXI6IG5vbmVcclxuXHJcbiAgICAmOnskbnRoLXNlbGVjdG9yfSh7JGN5Y2xlfW4pXHJcbiAgICAgIGZsb2F0OiBvcHBvc2l0ZS1zaWRlXHJcblxyXG4gICAgJjp7JG50aC1zZWxlY3Rvcn0oeyRjeWNsZX1uICsgMSlcclxuICAgICAgY2xlYXI6IGJvdGhcclxuXHJcblxyXG5tb3ZlKCRyYXRpb3MgPSAwLCAkY29sLW9yLXNwYW4gPSBjb2x1bW4sICRndXR0ZXIgPSAkamVldC5ndXR0ZXIpXHJcbiAgdHJhbnNsYXRlID0gJydcclxuICBzaWRlID0gX2dldC1sYXlvdXQtZGlyZWN0aW9uKClcclxuXHJcbiAgaWYgc2lkZSA9PSByaWdodFxyXG4gICAgJHJhdGlvcyA9IF9yZXBsYWNlLW50aCgkcmF0aW9zLCAwLCAkcmF0aW9zWzBdICogLTEpXHJcblxyXG4gIGlmICRjb2wtb3Itc3BhbiA9PSBjb2x1bW4gb3IgJGNvbC1vci1zcGFuID09IGNvbCBvciAkY29sLW9yLXNwYW4gPT0gY1xyXG4gICAgY29sdW1uLXdpZHRocyA9IF9nZXQtY29sdW1uKCRyYXRpb3MsICRndXR0ZXIpXHJcbiAgICB0cmFuc2xhdGUgPSBjb2x1bW4td2lkdGhzWzBdICsgY29sdW1uLXdpZHRoc1sxXVxyXG4gIGVsc2VcclxuICAgIHRyYW5zbGF0ZSA9IF9nZXQtc3BhbigkcmF0aW9zKVxyXG5cclxuICBwb3NpdGlvbjogcmVsYXRpdmVcclxuICBsZWZ0OiAodHJhbnNsYXRlKSVcclxuXHJcblxyXG51bm1vdmUoKVxyXG4gIHBvc2l0aW9uOiBzdGF0aWNcclxuICBsZWZ0OiAwXHJcblxyXG5cclxuZGVidWcoJGNvbG9yID0gYmx1ZSwgJGltcG9ydGFudCA9IGZhbHNlKVxyXG4gIGlmICRpbXBvcnRhbnRcclxuICAgICpcclxuICAgICAgYmFja2dyb3VuZDogcmdiYSgkY29sb3IsIDUlKSAhaW1wb3J0YW50XHJcbiAgZWxzZVxyXG4gICAgKlxyXG4gICAgICBiYWNrZ3JvdW5kOiByZ2JhKCRjb2xvciwgNSUpXHJcblxyXG5cclxuY2VudGVyKCRtYXgtd2lkdGggPSAkamVldC5tYXgtd2lkdGgsICRwYWQgPSAwKVxyXG4gIGNsZWFyZml4KClcclxuICB3aWR0aDogYXV0b1xyXG4gIG1heC13aWR0aDogJG1heC13aWR0aFxyXG4gIGZsb2F0OiBub25lXHJcbiAgZGlzcGxheTogdW5xdW90ZSgnYmxvY2snKVxyXG4gIG1hcmdpbi1yaWdodDogYXV0b1xyXG4gIG1hcmdpbi1sZWZ0OiBhdXRvXHJcbiAgcGFkZGluZy1sZWZ0OiAkcGFkXHJcbiAgcGFkZGluZy1yaWdodDogJHBhZFxyXG5cclxuXHJcbnVuY2VudGVyKClcclxuICBtYXgtd2lkdGg6IG5vbmVcclxuICBtYXJnaW4tcmlnaHQ6IDBcclxuICBtYXJnaW4tbGVmdDogMFxyXG4gIHBhZGRpbmctbGVmdDogMFxyXG4gIHBhZGRpbmctcmlnaHQ6IDBcclxuXHJcblxyXG5zdGFjaygkcGFkID0gMCwgJGFsaWduID0gZmFsc2UpXHJcbiAgc2lkZSA9IF9nZXQtbGF5b3V0LWRpcmVjdGlvbigpXHJcbiAgb3Bwb3NpdGUtc2lkZSA9IG9wcG9zaXRlLXBvc2l0aW9uKHNpZGUpXHJcblxyXG4gIGRpc3BsYXk6IHVucXVvdGUoJ2Jsb2NrJylcclxuICBjbGVhcjogYm90aFxyXG4gIGZsb2F0OiBub25lXHJcbiAgd2lkdGg6IDEwMCVcclxuICBtYXJnaW4tbGVmdDogYXV0b1xyXG4gIG1hcmdpbi1yaWdodDogYXV0b1xyXG5cclxuICAmOmZpcnN0LWNoaWxkXHJcbiAgICBtYXJnaW4te3NpZGV9OiBhdXRvXHJcblxyXG4gICY6bGFzdC1jaGlsZFxyXG4gICAgbWFyZ2luLXtvcHBvc2l0ZS1zaWRlfTogYXV0b1xyXG5cclxuICBpZiAkcGFkICE9IDBcclxuICAgIHBhZGRpbmctbGVmdDogJHBhZFxyXG4gICAgcGFkZGluZy1yaWdodDogJHBhZFxyXG5cclxuICBpZiAoJGFsaWduIGlzIG5vdCBmYWxzZSlcclxuICAgIGlmICgkYWxpZ24gPT0gY2VudGVyKSBvciAoJGFsaWduID09IGMpXHJcbiAgICAgIHRleHQtYWxpZ246IGNlbnRlclxyXG4gICAgaWYgKCRhbGlnbiA9PSBsZWZ0KSBvciAoJGFsaWduID09IGwpXHJcbiAgICAgIHRleHQtYWxpZ246IGxlZnRcclxuICAgIGlmICgkYWxpZ24gPT0gcmlnaHQpIG9yICgkYWxpZ24gPT0gcilcclxuICAgICAgdGV4dC1hbGlnbjogcmlnaHRcclxuXHJcblxyXG51bnN0YWNrKClcclxuICBzaWRlID0gX2dldC1sYXlvdXQtZGlyZWN0aW9uKClcclxuICBvcHBvc2l0ZS1zaWRlID0gb3Bwb3NpdGUtcG9zaXRpb24oc2lkZSlcclxuXHJcbiAgdGV4dC1hbGlnbjogc2lkZVxyXG4gIGRpc3BsYXk6IGlubGluZVxyXG4gIGNsZWFyOiBub25lXHJcbiAgd2lkdGg6IGF1dG9cclxuICBtYXJnaW4tbGVmdDogMFxyXG4gIG1hcmdpbi1yaWdodDogMFxyXG5cclxuICAmOmZpcnN0LWNoaWxkXHJcbiAgICBtYXJnaW4te3NpZGV9OiAwXHJcblxyXG4gICY6bGFzdC1jaGlsZFxyXG4gICAgbWFyZ2luLXtvcHBvc2l0ZS1zaWRlfTogMFxyXG5cclxuXHJcbmFsaWduKCRkaXJlY3Rpb24gPSBib3RoKVxyXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZVxyXG4gIHRyYW5zZm9ybS1zdHlsZTogcHJlc2VydmUtM2RcclxuXHJcbiAgaWYgKCRkaXJlY3Rpb24gPT0gaG9yaXpvbnRhbCkgb3IgKCRkaXJlY3Rpb24gPT0gaClcclxuICAgIGxlZnQ6IDUwJVxyXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpXHJcbiAgZWxzZSBpZiAoJGRpcmVjdGlvbiA9PSB2ZXJ0aWNhbCkgb3IgKCRkaXJlY3Rpb24gPT0gdilcclxuICAgIHRvcDogNTAlXHJcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSlcclxuICBlbHNlXHJcbiAgICB0b3A6IDUwJVxyXG4gICAgbGVmdDogNTAlXHJcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKVxyXG5cclxuXHJcbmNsZWFyZml4KClcclxuICAmOjphZnRlclxyXG4gICAgY29udGVudDogJydcclxuICAgIGRpc3BsYXk6IHRhYmxlXHJcbiAgICBjbGVhcjogYm90aFxyXG4iLCIuYnV0dG9uIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogJGhpZ2hsaWdodDtcbiAgYm9yZGVyOiAwIG5vbmUgdHJhbnNwYXJlbnQ7XG4gIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgY29sb3I6ICR3aGl0ZTtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICBmb250LXNpemU6ICRyZW0oMjBweCk7XG4gIGxpbmUtaGVpZ2h0OiAkcmVtKDQwcHgpO1xuICBwYWRkaW5nOiAkcmVtKDEwcHgpICRyZW0oMjZweCk7XG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgYm94LXNoYWRvdzogMCAzcHggMCBkYXJrZW4oJGhpZ2hsaWdodCwgMzAlKTtcblxuICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAkc21hbGwpIHtcbiAgICBmb250LXNpemU6ICRyZW0oMjZweCk7XG4gICAgbGluZS1oZWlnaHQ6ICRyZW0oNTBweCk7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICB9XG5cbiAgJjpob3ZlciB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogZGFya2VuKCRoaWdobGlnaHQsIDIwJSk7XG4gIH1cblxuICAmOmFjdGl2ZSB7XG4gICAgb3BhY2l0eTogMC41O1xuICB9XG5cbiAgJjpmb2N1cyB7XG5cbiAgfVxuXG4gICZfX2NhbmNlbCB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJGRhcmtIaWdobGlnaHQ7XG4gICAgYm94LXNoYWRvdzogMCAzcHggMCBkYXJrZW4oJGRhcmtIaWdobGlnaHQsIDMwJSk7XG5cbiAgICAmOmhvdmVyIHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IGRhcmtlbigkZGFya0hpZ2hsaWdodCwgMjAlKTtcbiAgICB9XG4gIH1cbn1cbiIsIi8qXG4gKiBIZWxwZXIgZm9yIGJvcmRlci1yYWRpdXMoKS5cbiAqL1xuXG4tYXBwbHktYm9yZGVyLXJhZGl1cyhwb3MsIGltcG9ydGFuY2UpXG4gIGlmIGxlbmd0aChwb3MpID09IDNcbiAgICAvLyBib3JkZXItcmFkaXVzOiA8dG9wIHwgYm90dG9tPiA8bGVmdCB8IHJpZ2h0PiA8bj5cbiAgICB5ID0gcG9zWzBdXG4gICAgeCA9IHBvc1sxXVxuICAgIC8vIFdlIGRvbid0IHVzZSB2ZW5kb3IgZm9yIGJvZGVyLXJhZGl1cyBhbnltb3JlXG4gICAgLy8gdmVuZG9yKCdib3JkZXItcmFkaXVzLSVzJXMnICUgcG9zLCBwb3NbMl0sIG9ubHk6IHdlYmtpdCBvZmZpY2lhbClcbiAgICB7J2JvcmRlci0lcy0lcy1yYWRpdXMnICUgcG9zfTogcG9zWzJdIGltcG9ydGFuY2VcbiAgZWxzZSBpZiBwb3NbMF0gaW4gKHRvcCBib3R0b20pXG4gICAgLy8gYm9yZGVyLXJhZGl1czogPHRvcCB8IGJvdHRvbT4gPG4+XG4gICAgLWFwcGx5LWJvcmRlci1yYWRpdXMocG9zWzBdIGxlZnQgcG9zWzFdLCBpbXBvcnRhbmNlKVxuICAgIC1hcHBseS1ib3JkZXItcmFkaXVzKHBvc1swXSByaWdodCBwb3NbMV0sIGltcG9ydGFuY2UpXG4gIGVsc2UgaWYgcG9zWzBdIGluIChsZWZ0IHJpZ2h0KVxuICAgIC8vIGJvcmRlci1yYWRpdXM6IDxsZWZ0IHwgcmlnaHQ+IDxuPlxuICAgIHVuc2hpZnQocG9zLCB0b3ApO1xuICAgIC1hcHBseS1ib3JkZXItcmFkaXVzKHBvcywgaW1wb3J0YW5jZSlcbiAgICBwb3NbMF0gPSBib3R0b21cbiAgICAtYXBwbHktYm9yZGVyLXJhZGl1cyhwb3MsIGltcG9ydGFuY2UpXG5cbi8qXG4gKiBib3JkZXItcmFkaXVzIHN1cHBvcnRpbmcgYXVnbWVudGVkIGJlaGF2aW9yLlxuICpcbiAqIEV4YW1wbGVzOlxuICpcbiAqICAgIGJvcmRlci1yYWRpdXM6IDJweCA1cHhcbiAqICAgIGJvcmRlci1yYWRpdXM6IHRvcCA1cHggYm90dG9tIDEwcHhcbiAqICAgIGJvcmRlci1yYWRpdXM6IGxlZnQgNXB4XG4gKiAgICBib3JkZXItcmFkaXVzOiB0b3AgbGVmdCA1cHhcbiAqICAgIGJvcmRlci1yYWRpdXM6IHRvcCBsZWZ0IDEwcHggYm90dG9tIHJpZ2h0IDVweFxuICogICAgYm9yZGVyLXJhZGl1czogdG9wIGxlZnQgMTBweCwgYm90dG9tIHJpZ2h0IDVweFxuICpcbiAqL1xuXG5ib3JkZXItcmFkaXVzKClcbiAgcG9zID0gKClcbiAgYXVnbWVudGVkID0gZmFsc2VcbiAgaW1wb3J0YW5jZSA9IGFyZ3VtZW50c1tsZW5ndGgoYXJndW1lbnRzKSAtIDFdID09ICFpbXBvcnRhbnQgPyAhaW1wb3J0YW50IDogdW5xdW90ZSgnJylcblxuICBmb3IgYXJncyBpbiBhcmd1bWVudHNcbiAgICBmb3IgYXJnIGluIGFyZ3NcbiAgICAgIGlmIGFyZyBpcyBhICdpZGVudCdcbiAgICAgICAgYXBwZW5kKHBvcywgYXJnKVxuICAgICAgICBhdWdtZW50ZWQgPSB0cnVlXG4gICAgICBlbHNlXG4gICAgICAgIGFwcGVuZChwb3MsIGFyZylcbiAgICAgICAgaWYgYXVnbWVudGVkXG4gICAgICAgICAgLWFwcGx5LWJvcmRlci1yYWRpdXMocG9zLCBpbXBvcnRhbmNlKVxuICAgICAgICAgIHBvcyA9ICgpXG4gIGJvcmRlci1yYWRpdXMgcG9zIHVubGVzcyBhdWdtZW50ZWRcbiIsIi5mb3JtIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogJHdoaXRlO1xuICBwYWRkaW5nOiAkcmVtKDIwcHgpICRyZW0oMjZweCk7XG4gIGJvcmRlci1yYWRpdXM6ICRyZW0oMTJweCk7XG59XG5cbi5maWVsZHMge1xuICB3aWR0aDogNjAlO1xuICBmbG9hdDogbGVmdDtcbn1cblxuLmFjdGlvbnMge1xuICB3aWR0aDogMzUlO1xuICBmbG9hdDogcmlnaHQ7XG59XG5cbi5sYWJlbCB7XG4gIGNvbG9yOiAkZGFya0hpZ2hsaWdodDtcbiAgZGlzcGxheTogYmxvY2s7XG4gIGZvbnQtZmFtaWx5OiAkaGVhZGluZ0ZvbnQ7XG4gIGZvbnQtc2l6ZTogJHJlbSgzNnB4KTtcbiAgbGluZS1oZWlnaHQ6ICRyZW0oNDBweCk7XG4gIG1hcmdpbi1ib3R0b206ICRyZW0oMTBweCk7XG59XG5cbi5maWVsZCB7XG4gIG1hcmdpbi1ib3R0b206ICRyZW0oMzBweCk7XG59XG5cbi5pbnB1dCB7XG4gIGZvbnQtZmFtaWx5OiAkYm9keUZvbnQ7XG4gIGZvbnQtc2l6ZTogJHJlbSgyMHB4KTtcbiAgbGluZS1oZWlnaHQ6ICRyZW0oMzBweCk7XG4gIHBhZGRpbmc6ICRyZW0oMTBweCkgJHJlbSgxNnB4KTtcbiAgYm9yZGVyLXJhZGl1czogJHJlbSg2cHgpO1xuICBib3gtc2hhZG93OiBpbnNldCAwIDNweCAxMnB4IGhzbGEoMCwwLDAsLjE1KTtcbiAgYm9yZGVyOiAwIG5vbmUgdHJhbnNwYXJlbnQ7XG4gIHdpZHRoOiAxMDAlO1xuXG4gIHRleHRhcmVhJiB7XG4gICAgcmVzaXplOiB2ZXJ0aWNhbDtcbiAgfVxufVxuIiwiLmNha2VzIHtcbiAgJi0tbGlzdCB7XG4gICAgY2xlYXJmaXgoKTtcbiAgfVxuXG4gICYtLWl0ZW0ge1xuICAgIGZsb2F0OiBsZWZ0XG4gICAgbWFyZ2luLWJvdHRvbTogJHJlbSg1MHB4KTtcbiAgICBtYXJnaW4tcmlnaHQ6IDMlO1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICB3aWR0aDogdW5pdCgoMTAzLzMpIC0gMywgJyUnKTtcbiAgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC4yNXMgZWFzZS1pbjtcbiAgICBib3gtc2hhZG93OiAwIDFweCAycHggaHNsYSgwLDAsMCwuMTUpLCBib3gtc2hhZG93IDAuMjVzIGVhc2UtaW47XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICBib3JkZXItcmFkaXVzOiAkcmVtKDEycHgpO1xuICAgIGhlaWdodDogJHJlbSg1MDBweCk7XG5cbiAgICAmOm50aC1jaGlsZCgzbikge1xuICAgICAgbWFyZ2luLXJpZ2h0OiAwO1xuICAgIH1cblxuICAgICY6aG92ZXIge1xuICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKCRyZW0oLTVweCkpO1xuICAgICAgYm94LXNoYWRvdzogMCAzcHggMjBweCBoc2xhKDAsMCwwLC4xNSk7XG4gICAgfVxuXG4gICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogJG1lZGl1bSkge1xuICAgICAgd2lkdGg6IHVuaXQoKDEwNS8yKSAtIDUsICclJyk7XG4gICAgICBtYXJnaW4tcmlnaHQ6IDUlO1xuXG4gICAgICAmOm50aC1jaGlsZCgzbikge1xuICAgICAgICBtYXJnaW4tcmlnaHQ6IDUlO1xuICAgICAgfVxuXG4gICAgICAmOm50aC1jaGlsZCgybikge1xuICAgICAgICBtYXJnaW4tcmlnaHQ6IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogJHNtYWxsKSB7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIG1hcmdpbi1yaWdodDogMDtcbiAgICB9XG5cbiAgICAmLWxpbmsge1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHdoaXRlO1xuICAgICAgY29sb3I6IGluaGVyaXQ7XG4gICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICAgIGhlaWdodDogJHJlbSg1MDBweCk7XG4gICAgfVxuXG4gICAgJi1wb3N0ZXIge1xuICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICBtYXJnaW4tYm90dG9tOiAkcmVtKDIwcHgpO1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgfVxuXG4gICAgJi1uYW1lIHtcbiAgICAgIGNvbG9yOiAkaGlnaGxpZ2h0O1xuICAgICAgZm9udC1zaXplOiAkcmVtKDQycHgpO1xuICAgICAgZm9udC13ZWlnaHQ6IDcwMDtcbiAgICAgIG1hcmdpbi1ib3R0b206ICRyZW0oMTBweCk7XG4gICAgICBwYWRkaW5nLWxlZnQ6ICRyZW0oMjZweCk7XG4gICAgICBwYWRkaW5nLXJpZ2h0OiAkcmVtKDI2cHgpO1xuICAgIH1cblxuICAgICYtY29tbWVudCB7XG4gICAgICBmb250LXNpemU6ICRyZW0oMTZweCk7XG4gICAgICBsaW5lLWhlaWdodDogJHJlbSgyMHB4KTtcbiAgICB9XG5cbiAgICAmLXJlbW92ZSB7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMCwwLDkwKTtcbiAgICAgIGJvcmRlci1yYWRpdXM6ICRyZW0oMzBweCk7XG4gICAgICBib3R0b206ICRyZW0oMjBweCk7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgaGVpZ2h0OiAkcmVtKDQwcHgpO1xuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgcmlnaHQ6ICRyZW0oMjBweCk7XG4gICAgICB3aWR0aDogJHJlbSg0MHB4KTtcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcblxuICAgICAgc3ZnIHtcbiAgICAgICAgd2lkdGg6ICRyZW0oMjBweCk7XG4gICAgICAgIGhlaWdodDogJHJlbSgyMHB4KTtcbiAgICAgICAgZmlsbDogaHNsKDAsMCw3MCk7XG4gICAgICB9XG5cbiAgICAgICY6aG92ZXIge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkaGlnaGxpZ2h0O1xuXG4gICAgICAgIHN2ZyB7XG4gICAgICAgICAgZmlsbDogJHdoaXRlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi5jYWtlLWRldGFpbHMge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAkd2hpdGU7XG4gIGJvcmRlci1yYWRpdXM6ICRyZW0oMTJweCk7XG4gIHBhZGRpbmc6ICRyZW0oNDBweCkgJHJlbSg0MnB4KTtcblxuICAmLS1wb3N0ZXIge1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIG1hcmdpbi1ib3R0b206ICRyZW0oMzBweCk7XG4gIH1cblxuICAmLS1jb21tZW50IHtcbiAgICBmb250LXNpemU6ICRyZW0oMjBweCk7XG4gICAgbGluZS1oZWlnaHQ6ICRyZW0oMjVweCk7XG4gIH1cbn1cbiIsIi8qXG4gKiBPdmVyZmxvdyB1dGlsaXR5LiBNYXBzIHRvIHJlZ3VsYXIgb3ZlcmZsb3csIGFuZCBhZGRzIGFuIGVsbGlwc2lzIHZhbHVlLlxuICpcbiAqIFN5bm9wc2lzOlxuICpcbiAqICAgb3ZlcmZsb3c6IDx0eXBlPlxuICpcbiAqIEV4YW1wbGVzOlxuICpcbiAqICAgICBvdmVyZmxvdzogYXV0b1xuICogICAgIG92ZXJmbG93OiBoaWRkZW5cbiAqICAgICBvdmVyZmxvdzogZWxsaXBzaXNcbiAqXG4gKi9cblxub3ZlcmZsb3coKVxuICBpZiBhcmd1bWVudHNbMF0gPT0gZWxsaXBzaXNcbiAgICBlbGxpcHNpcygpXG4gIGVsc2VcbiAgICBvdmVyZmxvdzogYXJndW1lbnRzXG4iLCJjYWxsZWQtZnJvbSA9ICgpXG5cbnZlbmRvcnMgPSBtb3ogd2Via2l0IG8gbXMgb2ZmaWNpYWxcblxuLy8gc3RyaW5naWZ5IHRoZSBnaXZlbiBhcmdcblxuLXN0cmluZyhhcmcpXG4gIHR5cGUoYXJnKSArICcgJyArIGFyZ1xuXG4vLyByZXF1aXJlIGEgY29sb3JcblxucmVxdWlyZS1jb2xvcihjb2xvcilcbiAgdW5sZXNzIGNvbG9yIGlzIGEgJ2NvbG9yJ1xuICAgIGVycm9yKCdSR0Igb3IgSFNMIHZhbHVlIGV4cGVjdGVkLCBnb3QgYSAnICsgLXN0cmluZyhjb2xvcikpXG5cbi8vIHJlcXVpcmUgYSB1bml0XG5cbnJlcXVpcmUtdW5pdChuKVxuICB1bmxlc3MgbiBpcyBhICd1bml0J1xuICAgIGVycm9yKCd1bml0IGV4cGVjdGVkLCBnb3QgYSAnICsgLXN0cmluZyhuKSlcblxuLy8gcmVxdWlyZSBhIHN0cmluZ1xuXG5yZXF1aXJlLXN0cmluZyhzdHIpXG4gIHVubGVzcyBzdHIgaXMgYSAnc3RyaW5nJyBvciBzdHIgaXMgYSAnaWRlbnQnXG4gICAgZXJyb3IoJ3N0cmluZyBleHBlY3RlZCwgZ290IGEgJyArIC1zdHJpbmcoc3RyKSlcblxuLy8gTWF0aCBmdW5jdGlvbnNcblxuYWJzKG4pIHsgbWF0aChuLCAnYWJzJykgfVxubWluKGEsIGIpIHsgYSA8IGIgPyBhIDogYiB9XG5tYXgoYSwgYikgeyBhID4gYiA/IGEgOiBiIH1cblxuLy8gVHJpZ29ub21ldHJpY3NcblBJID0gLW1hdGgtcHJvcCgnUEknKVxuXG5yYWRpYW5zLXRvLWRlZ3JlZXMoYW5nbGUpXG4gIGFuZ2xlICogKDE4MCAvIFBJKVxuXG5kZWdyZWVzLXRvLXJhZGlhbnMoYW5nbGUpXG4gIHVuaXQoYW5nbGUgKiAoUEkgLyAxODApLCcnKVxuXG5zaW4obilcbiAgbiA9IGRlZ3JlZXMtdG8tcmFkaWFucyhuKSBpZiB1bml0KG4pID09ICdkZWcnXG4gIHJvdW5kKG1hdGgobiwgJ3NpbicpLCA5KVxuXG5jb3MobilcbiAgbiA9IGRlZ3JlZXMtdG8tcmFkaWFucyhuKSBpZiB1bml0KG4pID09ICdkZWcnXG4gIHJvdW5kKG1hdGgobiwgJ2NvcycpLCA5KVxuXG4vLyBSb3VuZGluZyBNYXRoIGZ1bmN0aW9uc1xuXG5jZWlsKG4sIHByZWNpc2lvbiA9IDApXG4gIG11bHRpcGxpZXIgPSAxMCAqKiBwcmVjaXNpb25cbiAgbWF0aChuICogbXVsdGlwbGllciwgJ2NlaWwnKSAvIG11bHRpcGxpZXJcblxuZmxvb3IobiwgcHJlY2lzaW9uID0gMClcbiAgbXVsdGlwbGllciA9IDEwICoqIHByZWNpc2lvblxuICBtYXRoKG4gKiBtdWx0aXBsaWVyLCAnZmxvb3InKSAvIG11bHRpcGxpZXJcblxucm91bmQobiwgcHJlY2lzaW9uID0gMClcbiAgbXVsdGlwbGllciA9IDEwICoqIHByZWNpc2lvblxuICBtYXRoKG4gKiBtdWx0aXBsaWVyLCAncm91bmQnKSAvIG11bHRpcGxpZXJcblxuLy8gcmV0dXJuIHRoZSBzdW0gb2YgdGhlIGdpdmVuIG51bWJlcnNcblxuc3VtKG51bXMpXG4gIHN1bSA9IDBcbiAgc3VtICs9IG4gZm9yIG4gaW4gbnVtc1xuXG4vLyByZXR1cm4gdGhlIGF2ZXJhZ2Ugb2YgdGhlIGdpdmVuIG51bWJlcnNcblxuYXZnKG51bXMpXG4gIHN1bShudW1zKSAvIGxlbmd0aChudW1zKVxuXG4vLyByZXR1cm4gYSB1bml0bGVzcyBudW1iZXIsIG9yIHBhc3MgdGhyb3VnaFxuXG5yZW1vdmUtdW5pdChuKVxuICBpZiB0eXBlb2YobikgaXMgXCJ1bml0XCJcbiAgICB1bml0KG4sIFwiXCIpXG4gIGVsc2VcbiAgICBuXG5cbi8vIGNvbnZlcnQgYSBwZXJjZW50IHRvIGEgZGVjaW1hbCwgb3IgcGFzcyB0aHJvdWdoXG5cbnBlcmNlbnQtdG8tZGVjaW1hbChuKVxuICBpZiB1bml0KG4pIGlzIFwiJVwiXG4gICAgcmVtb3ZlLXVuaXQobikgLyAxMDBcbiAgZWxzZVxuICAgIG5cblxuLy8gY2hlY2sgaWYgbiBpcyBhbiBvZGQgbnVtYmVyXG5cbm9kZChuKVxuICAxID09IG4gJSAyXG5cbi8vIGNoZWNrIGlmIG4gaXMgYW4gZXZlbiBudW1iZXJcblxuZXZlbihuKVxuICAwID09IG4gJSAyXG5cbi8vIGNoZWNrIGlmIGNvbG9yIGlzIGxpZ2h0XG5cbmxpZ2h0KGNvbG9yKVxuICBsaWdodG5lc3MoY29sb3IpID49IDUwJVxuXG4vLyBjaGVjayBpZiBjb2xvciBpcyBkYXJrXG5cbmRhcmsoY29sb3IpXG4gIGxpZ2h0bmVzcyhjb2xvcikgPCA1MCVcblxuLy8gZGVzYXR1cmF0ZSBjb2xvciBieSBhbW91bnRcblxuZGVzYXR1cmF0ZShjb2xvciwgYW1vdW50KVxuICBhZGp1c3QoY29sb3IsICdzYXR1cmF0aW9uJywgLSBhbW91bnQpXG5cbi8vIHNhdHVyYXRlIGNvbG9yIGJ5IGFtb3VudFxuXG5zYXR1cmF0ZShjb2xvciA9ICcnLCBhbW91bnQgPSAxMDAlKVxuICBpZiBjb2xvciBpcyBhICdjb2xvcidcbiAgICBhZGp1c3QoY29sb3IsICdzYXR1cmF0aW9uJywgYW1vdW50KVxuICBlbHNlXG4gICAgdW5xdW90ZSggXCJzYXR1cmF0ZShcIiArIGNvbG9yICsgXCIpXCIgKVxuXG4vLyBkYXJrZW4gYnkgdGhlIGdpdmVuIGFtb3VudFxuXG5kYXJrZW4oY29sb3IsIGFtb3VudClcbiAgYWRqdXN0KGNvbG9yLCAnbGlnaHRuZXNzJywgLSBhbW91bnQpXG5cbi8vIGxpZ2h0ZW4gYnkgdGhlIGdpdmVuIGFtb3VudFxuXG5saWdodGVuKGNvbG9yLCBhbW91bnQpXG4gIGFkanVzdChjb2xvciwgJ2xpZ2h0bmVzcycsIGFtb3VudClcblxuLy8gZGVjcmVhc2Ugb3BhY2l0eSBieSBhbW91bnRcblxuZmFkZS1vdXQoY29sb3IsIGFtb3VudClcbiAgY29sb3IgLSByZ2JhKGJsYWNrLCBwZXJjZW50LXRvLWRlY2ltYWwoYW1vdW50KSlcblxuLy8gaW5jcmVhc2Ugb3BhY2l0eSBieSBhbW91bnRcblxuZmFkZS1pbihjb2xvciwgYW1vdW50KVxuICBjb2xvciArIHJnYmEoYmxhY2ssIHBlcmNlbnQtdG8tZGVjaW1hbChhbW91bnQpKVxuXG4vLyBzcGluIGh1ZSBieSBhIGdpdmVuIGFtb3VudFxuXG5zcGluKGNvbG9yLCBhbW91bnQpXG4gIGNvbG9yICsgdW5pdChhbW91bnQsIGRlZylcblxuLy8gbWl4IHR3byBjb2xvcnMgYnkgYSBnaXZlbiBhbW91bnRcblxubWl4KGNvbG9yMSwgY29sb3IyLCB3ZWlnaHQgPSA1MCUpXG4gIHVubGVzcyB3ZWlnaHQgaW4gMC4uMTAwXG4gICAgZXJyb3IoXCJXZWlnaHQgbXVzdCBiZSBiZXR3ZWVuIDAlIGFuZCAxMDAlXCIpXG5cbiAgaWYgbGVuZ3RoKGNvbG9yMSkgPT0gMlxuICAgIHdlaWdodCA9IGNvbG9yMVswXVxuICAgIGNvbG9yMSA9IGNvbG9yMVsxXVxuXG4gIGVsc2UgaWYgbGVuZ3RoKGNvbG9yMikgPT0gMlxuICAgIHdlaWdodCA9IDEwMCAtIGNvbG9yMlswXVxuICAgIGNvbG9yMiA9IGNvbG9yMlsxXVxuXG4gIHJlcXVpcmUtY29sb3IoY29sb3IxKVxuICByZXF1aXJlLWNvbG9yKGNvbG9yMilcblxuICBwID0gdW5pdCh3ZWlnaHQgLyAxMDAsICcnKVxuICB3ID0gcCAqIDIgLSAxXG5cbiAgYSA9IGFscGhhKGNvbG9yMSkgLSBhbHBoYShjb2xvcjIpXG5cbiAgdzEgPSAoKCh3ICogYSA9PSAtMSkgPyB3IDogKHcgKyBhKSAvICgxICsgdyAqIGEpKSArIDEpIC8gMlxuICB3MiA9IDEgLSB3MVxuXG4gIGNoYW5uZWxzID0gKHJlZChjb2xvcjEpIHJlZChjb2xvcjIpKSAoZ3JlZW4oY29sb3IxKSBncmVlbihjb2xvcjIpKSAoYmx1ZShjb2xvcjEpIGJsdWUoY29sb3IyKSlcbiAgcmdiID0gKClcblxuICBmb3IgcGFpciBpbiBjaGFubmVsc1xuICAgIHB1c2gocmdiLCBmbG9vcihwYWlyWzBdICogdzEgKyBwYWlyWzFdICogdzIpKVxuXG4gIGExID0gYWxwaGEoY29sb3IxKSAqIHBcbiAgYTIgPSBhbHBoYShjb2xvcjIpICogKDEgLSBwKVxuICBhbHBoYSA9IGExICsgYTJcblxuICByZ2JhKHJnYlswXSwgcmdiWzFdLCByZ2JbMl0sIGFscGhhKVxuXG4vLyBpbnZlcnQgY29sb3JzLCBsZWF2ZSBhbHBoYSBpbnRhY3RcblxuaW52ZXJ0KGNvbG9yID0gJycpXG4gIGlmIGNvbG9yIGlzIGEgJ2NvbG9yJ1xuICAgIHJnYmEoI2ZmZiAtIGNvbG9yLCBhbHBoYShjb2xvcikpXG4gIGVsc2VcbiAgICB1bnF1b3RlKCBcImludmVydChcIiArIGNvbG9yICsgXCIpXCIgKVxuXG4vLyBnaXZlIGNvbXBsZW1lbnQgb2YgdGhlIGdpdmVuIGNvbG9yXG5cbmNvbXBsZW1lbnQoIGNvbG9yIClcbiAgc3BpbiggY29sb3IsIDE4MCApXG5cbi8vIGdpdmUgZ3JheXNjYWxlIG9mIHRoZSBnaXZlbiBjb2xvclxuXG5ncmF5c2NhbGUoIGNvbG9yID0gJycgKVxuICBpZiBjb2xvciBpcyBhICdjb2xvcidcbiAgICBkZXNhdHVyYXRlKCBjb2xvciwgMTAwJSApXG4gIGVsc2VcbiAgICB1bnF1b3RlKCBcImdyYXlzY2FsZShcIiArIGNvbG9yICsgXCIpXCIgKVxuXG4vLyBtaXggdGhlIGdpdmVuIGNvbG9yIHdpdGggd2hpdGVcblxudGludCggY29sb3IsIHBlcmNlbnQgKVxuICBtaXgoIHdoaXRlLCBjb2xvciwgcGVyY2VudCApXG5cbi8vIG1peCB0aGUgZ2l2ZW4gY29sb3Igd2l0aCBibGFja1xuXG5zaGFkZSggY29sb3IsIHBlcmNlbnQgKVxuICBtaXgoIGJsYWNrLCBjb2xvciwgcGVyY2VudCApXG5cbi8vIHJldHVybiB0aGUgbGFzdCB2YWx1ZSBpbiB0aGUgZ2l2ZW4gZXhwclxuXG5sYXN0KGV4cHIpXG4gIGV4cHJbbGVuZ3RoKGV4cHIpIC0gMV1cblxuLy8gcmV0dXJuIGtleXMgaW4gdGhlIGdpdmVuIHBhaXJzIG9yIG9iamVjdFxuXG5rZXlzKHBhaXJzKVxuICByZXQgPSAoKVxuICBpZiB0eXBlKHBhaXJzKSA9PSAnb2JqZWN0J1xuICAgIGZvciBrZXkgaW4gcGFpcnNcbiAgICAgIHB1c2gocmV0LCBrZXkpXG4gIGVsc2VcbiAgICBmb3IgcGFpciBpbiBwYWlyc1xuICAgICAgcHVzaChyZXQsIHBhaXJbMF0pO1xuICByZXRcblxuLy8gcmV0dXJuIHZhbHVlcyBpbiB0aGUgZ2l2ZW4gcGFpcnMgb3Igb2JqZWN0XG5cbnZhbHVlcyhwYWlycylcbiAgcmV0ID0gKClcbiAgaWYgdHlwZShwYWlycykgPT0gJ29iamVjdCdcbiAgICBmb3Iga2V5LCB2YWwgaW4gcGFpcnNcbiAgICAgIHB1c2gocmV0LCB2YWwpXG4gIGVsc2VcbiAgICBmb3IgcGFpciBpbiBwYWlyc1xuICAgICAgcHVzaChyZXQsIHBhaXJbMV0pO1xuICByZXRcblxuLy8gam9pbiB2YWx1ZXMgd2l0aCB0aGUgZ2l2ZW4gZGVsaW1pdGVyXG5cbmpvaW4oZGVsaW0sIHZhbHMuLi4pXG4gIGJ1ZiA9ICcnXG4gIHZhbHMgPSB2YWxzWzBdIGlmIGxlbmd0aCh2YWxzKSA9PSAxXG4gIGZvciB2YWwsIGkgaW4gdmFsc1xuICAgIGJ1ZiArPSBpID8gZGVsaW0gKyB2YWwgOiB2YWxcblxuLy8gYWRkIGEgQ1NTIHJ1bGUgdG8gdGhlIGNvbnRhaW5pbmcgYmxvY2tcblxuLy8gLSBUaGlzIGRlZmluaXRpb24gYWxsb3dzIGFkZC1wcm9wZXJ0eSB0byBiZSB1c2VkIGFzIGEgbWl4aW5cbi8vIC0gSXQgaGFzIHRoZSBzYW1lIGVmZmVjdCBhcyBpbnRlcnBvbGF0aW9uIGJ1dCBhbGxvd3MgdXNlcnNcbi8vICAgdG8gb3B0IGZvciBhIGZ1bmN0aW9uYWwgc3R5bGVcblxuYWRkLXByb3BlcnR5LWZ1bmN0aW9uID0gYWRkLXByb3BlcnR5XG5hZGQtcHJvcGVydHkobmFtZSwgZXhwcilcbiAgaWYgbWl4aW5cbiAgICB7bmFtZX0gZXhwclxuICBlbHNlXG4gICAgYWRkLXByb3BlcnR5LWZ1bmN0aW9uKG5hbWUsIGV4cHIpXG5cbnByZWZpeC1jbGFzc2VzKHByZWZpeClcbiAgLXByZWZpeC1jbGFzc2VzKHByZWZpeCwgYmxvY2spXG5cbi8vIENhY2hpbmcgbWl4aW4sIHVzZSBpbnNpZGUgeW91ciBmdW5jdGlvbnMgdG8gZW5hYmxlIGNhY2hpbmcgYnkgZXh0ZW5kaW5nLlxuXG4kc3R5bHVzX21peGluX2NhY2hlID0ge31cbmNhY2hlKClcbiAgJGtleSA9IChjdXJyZW50LW1lZGlhKCkgb3IgJ25vLW1lZGlhJykgKyAnX18nICsgY2FsbGVkLWZyb21bMF0gKyAnX18nICsgYXJndW1lbnRzXG4gIGlmICRrZXkgaW4gJHN0eWx1c19taXhpbl9jYWNoZVxuICAgIEBleHRlbmQge1wiJGNhY2hlX3BsYWNlaG9sZGVyX2Zvcl9cIiArICRzdHlsdXNfbWl4aW5fY2FjaGVbJGtleV19XG4gIGVsc2UgaWYgJ2NhY2hlJyBpbiBjYWxsZWQtZnJvbVxuICAgIHtibG9ja31cbiAgZWxzZVxuICAgICRpZCA9IGxlbmd0aCgkc3R5bHVzX21peGluX2NhY2hlKVxuXG4gICAgJixcbiAgICAvJGNhY2hlX3BsYWNlaG9sZGVyX2Zvcl97JGlkfVxuICAgICAgJHN0eWx1c19taXhpbl9jYWNoZVska2V5XSA9ICRpZFxuICAgICAge2Jsb2NrfVxuXG4vLyBQZXJjZW50YWdlIGZ1bmN0aW9uIHRvIGNvbnZlcnQgYSBudW1iZXIsIGUuZy4gXCIuNDVcIiwgaW50byBhIHBlcmNlbnRhZ2UsIGUuZy4gXCI0NSVcIlxuXG5wZXJjZW50YWdlKG51bSlcbiAgcmV0dXJuIHVuaXQobnVtICogMTAwLCAnJScpXG5cbi8vIFJldHVybnMgdGhlIHBvc2l0aW9uIG9mIGEgYHZhbHVlYCB3aXRoaW4gYSBgbGlzdGBcblxuaW5kZXgobGlzdCwgdmFsdWUpXG4gIGZvciB2YWwsIGkgaW4gbGlzdFxuICAgIHJldHVybiBpIGlmIHZhbCA9PSB2YWx1ZVxuIiwiLmhlYWRlciB7XG4gIGJhY2tncm91bmQtY29sb3I6ICRkYXJrSGlnaGxpZ2h0O1xuICBkaXNwbGF5OiBibG9jaztcbiAgbWFyZ2luLWJvdHRvbTogJHJlbSgzMHB4KTtcbiAgcGFkZGluZzogJHJlbSgyMHB4KSAwO1xuXG4gIC5sb2dvIHtcbiAgICBhIHtcbiAgICAgIGNvbG9yOiAkcGFwZXI7XG4gICAgICBmb250LWZhbWlseTogJGhlYWRpbmdGb250O1xuICAgICAgZm9udC1zaXplOiAkcmVtKDQycHgpO1xuICAgICAgZm9udC13ZWlnaHQ6IDcwMDtcbiAgICAgIGxldHRlci1zcGFjaW5nOiAxcHg7XG4gICAgICBsaW5lLWhlaWdodDogJHJlbSg1MHB4KTtcbiAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICB9XG4gIH1cbn1cbiIsIi5pY29uIHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICB3aWR0aDogJHJlbSgzMHB4KTtcbiAgaGVpZ2h0OiAkcmVtKDMwcHgpO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAkd2hpdGU7XG4gIGJvcmRlci1yYWRpdXM6ICRyZW0oMzBweCk7XG4gIG1hcmdpbi1yaWdodDogJHJlbSg1cHgpO1xuXG4gIHN2ZyB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICAgIGZpbGw6ICRoaWdobGlnaHQ7XG4gIH1cblxuICAuYnV0dG9uICYge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICB0b3A6ICRyZW0oNnB4KTtcbiAgfVxufVxuIl19 */
